__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var _Text = _require(_dependencyMap[3]);

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var _fonts = _require(_dependencyMap[4]);

  var _fonts2 = babelHelpers.interopRequireDefault(_fonts);

  var _colors = _require(_dependencyMap[5]);

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _Button = _require(_dependencyMap[6]);

  var _Button2 = babelHelpers.interopRequireDefault(_Button);

  var _normalizeText = _require(_dependencyMap[7]);

  var _normalizeText2 = babelHelpers.interopRequireDefault(_normalizeText);

  var _ViewPropTypes = _require(_dependencyMap[8]);

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var PricingCard = function PricingCard(props) {
    var containerStyle = props.containerStyle,
        wrapperStyle = props.wrapperStyle,
        title = props.title,
        price = props.price,
        info = props.info,
        button = props.button,
        color = props.color,
        titleFont = props.titleFont,
        pricingFont = props.pricingFont,
        infoFont = props.infoFont,
        buttonFont = props.buttonFont,
        onButtonPress = props.onButtonPress,
        attributes = babelHelpers.objectWithoutProperties(props, ["containerStyle", "wrapperStyle", "title", "price", "info", "button", "color", "titleFont", "pricingFont", "infoFont", "buttonFont", "onButtonPress"]);
    return _react2.default.createElement(
      _reactNative.View,
      babelHelpers.extends({}, attributes, {
        style: [styles.container, containerStyle && containerStyle]
      }),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.wrapper, wrapperStyle && wrapperStyle]
        },
        _react2.default.createElement(
          _Text2.default,
          {
            style: [styles.pricingTitle, {
              color: color
            }, titleFont && {
              fontFamily: titleFont
            }]
          },
          title
        ),
        _react2.default.createElement(
          _Text2.default,
          {
            style: [styles.pricingPrice, pricingFont && {
              fontFamily: pricingFont
            }]
          },
          price
        ),
        info.map(function (item, i) {
          return _react2.default.createElement(
            _Text2.default,
            {
              key: i,
              style: [styles.pricingInfo, infoFont && {
                fontFamily: infoFont
              }]
            },
            item
          );
        }),
        _react2.default.createElement(_Button2.default, {
          icon: {
            name: button.icon
          },
          buttonStyle: [styles.button, button.buttonStyle, {
            backgroundColor: color
          }],
          fontFamily: buttonFont && buttonFont,
          title: button.title,
          onPress: onButtonPress
        })
      )
    );
  };

  PricingCard.propTypes = {
    containerStyle: _ViewPropTypes2.default.style,
    wrapperStyle: _ViewPropTypes2.default.style,
    title: _propTypes2.default.string,
    price: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    info: _propTypes2.default.array,
    button: _propTypes2.default.object,
    color: _propTypes2.default.string,
    onButtonPress: _propTypes2.default.any,
    titleFont: _propTypes2.default.string,
    pricingFont: _propTypes2.default.string,
    infoFont: _propTypes2.default.string,
    buttonFont: _propTypes2.default.string
  };
  PricingCard.defaultProps = {
    color: _colors2.default.primary
  };

  var styles = _reactNative.StyleSheet.create({
    container: babelHelpers.extends({
      margin: 15,
      marginBottom: 15,
      backgroundColor: 'white',
      borderColor: _colors2.default.grey5,
      borderWidth: 1,
      padding: 15
    }, {
      shadowColor: 'rgba(0,0,0, .2)',
      shadowOffset: {
        height: 1,
        width: 0
      },
      shadowOpacity: 0.5,
      shadowRadius: 0.5
    }),
    wrapper: {
      backgroundColor: 'transparent'
    },
    pricingTitle: babelHelpers.extends({
      textAlign: 'center',
      color: _colors2.default.primary,
      fontSize: (0, _normalizeText2.default)(30)
    }, {
      fontWeight: '800'
    }),
    pricingPrice: babelHelpers.extends({
      textAlign: 'center',
      marginTop: 10,
      marginBottom: 10,
      fontSize: (0, _normalizeText2.default)(40)
    }, {
      fontWeight: '700'
    }),
    pricingInfo: babelHelpers.extends({
      textAlign: 'center',
      marginTop: 5,
      marginBottom: 5,
      color: _colors2.default.grey3
    }, {
      fontWeight: '600'
    }),
    button: {
      marginTop: 15,
      marginBottom: 10
    }
  });

  exports.default = PricingCard;
});