__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var _MaterialIcons = _require(_dependencyMap[3]);

  var _MaterialIcons2 = babelHelpers.interopRequireDefault(_MaterialIcons);

  var _colors = _require(_dependencyMap[4]);

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _normalizeText = _require(_dependencyMap[5]);

  var _normalizeText2 = babelHelpers.interopRequireDefault(_normalizeText);

  var _ViewPropTypes = _require(_dependencyMap[6]);

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var _getIconType = _require(_dependencyMap[7]);

  var _getIconType2 = babelHelpers.interopRequireDefault(_getIconType);

  var Search = function (_Component) {
    babelHelpers.inherits(Search, _Component);

    function Search() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, Search);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Search.__proto__ || Object.getPrototypeOf(Search)).call.apply(_ref, [this].concat(args))), _this), _this.getRef = function () {
        return _this.input || _this.refs[_this.props.textInputRef];
      }, _this.getRefHandler = function () {
        if (_this.props.textInputRef) {
          if (typeof _this.props.textInputRef === 'function') {
            return function (input) {
              _this.input = input;

              _this.props.textInputRef(input);
            };
          } else {
            return _this.props.textInputRef;
          }
        } else {
          return function (input) {
            return _this.input = input;
          };
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(Search, [{
      key: "focus",
      value: function focus() {
        this.getRef() && this.getRef().focus();
      }
    }, {
      key: "blur",
      value: function blur() {
        this.getRef() && this.getRef().blur();
      }
    }, {
      key: "clearText",
      value: function clearText() {
        this.getRef() && this.getRef().clear();
        this.props.onChangeText && this.props.onChangeText('');
        this.props.onClearText && this.props.onClearText();
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            containerStyle = _props.containerStyle,
            inputStyle = _props.inputStyle,
            icon = _props.icon,
            noIcon = _props.noIcon,
            lightTheme = _props.lightTheme,
            round = _props.round,
            showLoadingIcon = _props.showLoadingIcon,
            loadingIcon = _props.loadingIcon,
            clearIcon = _props.clearIcon,
            containerRef = _props.containerRef,
            underlineColorAndroid = _props.underlineColorAndroid,
            attributes = babelHelpers.objectWithoutProperties(_props, ["containerStyle", "inputStyle", "icon", "noIcon", "lightTheme", "round", "showLoadingIcon", "loadingIcon", "clearIcon", "containerRef", "underlineColorAndroid"]);
        var Icon = _MaterialIcons2.default;

        if (icon.type) {
          Icon = (0, _getIconType2.default)(icon.type);
        }

        return _react2.default.createElement(
          _reactNative.View,
          {
            ref: containerRef,
            style: [styles.container, lightTheme && styles.containerLight, containerStyle && containerStyle]
          },
          _react2.default.createElement(_reactNative.TextInput, babelHelpers.extends({}, attributes, {
            ref: this.getRefHandler(),
            underlineColorAndroid: underlineColorAndroid ? underlineColorAndroid : 'transparent',
            style: [styles.input, lightTheme && styles.inputLight, noIcon && {
              paddingLeft: 9
            }, round && {
              borderRadius: 20
            }, inputStyle && inputStyle, clearIcon && showLoadingIcon && {
              paddingRight: 50
            }, (clearIcon && !showLoadingIcon || !clearIcon && showLoadingIcon) && {
              paddingRight: 30
            }]
          })),
          !noIcon && _react2.default.createElement(Icon, {
            size: 16,
            style: [styles.icon, styles.searchIcon, icon.style && icon.style],
            name: icon.name || 'search',
            color: icon.color || _colors2.default.grey3
          }),
          clearIcon && _react2.default.createElement(Icon, {
            size: 16,
            style: [styles.icon, styles.clearIcon, clearIcon.style && clearIcon.style],
            name: clearIcon.name || 'close',
            onPress: this.clearText.bind(this),
            color: clearIcon.color || _colors2.default.grey3
          }),
          showLoadingIcon && _react2.default.createElement(_reactNative.ActivityIndicator, {
            style: [styles.loadingIcon, loadingIcon.style && loadingIcon.style, clearIcon && {
              right: 35
            }],
            color: icon.color || _colors2.default.grey3
          })
        );
      }
    }]);
    return Search;
  }(_react.Component);

  Search.propTypes = {
    icon: _propTypes2.default.object,
    noIcon: _propTypes2.default.bool,
    lightTheme: _propTypes2.default.bool,
    containerStyle: _ViewPropTypes2.default.style,
    inputStyle: _reactNative.Text.propTypes.style,
    round: _propTypes2.default.bool,
    showLoadingIcon: _propTypes2.default.bool,
    loadingIcon: _propTypes2.default.object,
    clearIcon: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.bool]),
    textInputRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
    containerRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
    underlineColorAndroid: _propTypes2.default.string,
    onChangeText: _propTypes2.default.func,
    onClearText: _propTypes2.default.func
  };
  Search.defaultProps = {
    placeholderTextColor: _colors2.default.grey3,
    lightTheme: false,
    noIcon: false,
    round: false,
    icon: {},
    showLoadingIcon: false,
    loadingIcon: {}
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      borderTopWidth: 1,
      borderBottomWidth: 1,
      borderBottomColor: '#000',
      borderTopColor: '#000',
      backgroundColor: _colors2.default.grey0
    },
    containerLight: {
      backgroundColor: _colors2.default.grey5,
      borderTopColor: '#e1e1e1',
      borderBottomColor: '#e1e1e1'
    },
    icon: babelHelpers.extends({
      backgroundColor: 'transparent',
      position: 'absolute',
      top: 15.5
    }, {
      top: 20
    }),
    loadingIcon: babelHelpers.extends({
      backgroundColor: 'transparent',
      position: 'absolute',
      right: 16,
      top: 13
    }, {
      top: 18
    }),
    input: babelHelpers.extends({
      paddingLeft: 26,
      paddingRight: 19,
      margin: 8,
      borderRadius: 3,
      overflow: 'hidden',
      backgroundColor: _colors2.default.searchBg,
      fontSize: (0, _normalizeText2.default)(14),
      color: _colors2.default.grey3,
      height: 40
    }, {
      borderWidth: 0
    }),
    inputLight: {
      backgroundColor: _colors2.default.grey4
    },
    searchIcon: {
      left: 16
    },
    clearIcon: {
      right: 16
    }
  });

  exports.default = Search;
});