__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var _getIconType = _require(_dependencyMap[3]);

  var _getIconType2 = babelHelpers.interopRequireDefault(_getIconType);

  var _ViewPropTypes = _require(_dependencyMap[4]);

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var Icon = function Icon(props) {
    var type = props.type,
        name = props.name,
        size = props.size,
        color = props.color,
        iconStyle = props.iconStyle,
        component = props.component,
        underlayColor = props.underlayColor,
        reverse = props.reverse,
        raised = props.raised,
        containerStyle = props.containerStyle,
        reverseColor = props.reverseColor,
        onPress = props.onPress,
        attributes = babelHelpers.objectWithoutProperties(props, ["type", "name", "size", "color", "iconStyle", "component", "underlayColor", "reverse", "raised", "containerStyle", "reverseColor", "onPress"]);
    var Component = _reactNative.View;

    if (onPress) {
      Component = _reactNative.TouchableHighlight;
    }

    if (component) {
      Component = component;
    }

    var Icon = void 0;

    if (!type) {
      Icon = (0, _getIconType2.default)('material');
    } else {
      Icon = (0, _getIconType2.default)(type);
    }

    return _react2.default.createElement(
      Component,
      babelHelpers.extends({}, attributes, {
        underlayColor: reverse ? color : underlayColor || color,
        style: [(reverse || raised) && styles.button, (reverse || raised) && {
          borderRadius: size + 4,
          height: size * 2 + 4,
          width: size * 2 + 4
        }, raised && styles.raised, {
          backgroundColor: reverse ? color : raised ? 'white' : 'transparent',
          alignItems: 'center',
          justifyContent: 'center'
        }, containerStyle && containerStyle],
        onPress: onPress
      }),
      _react2.default.createElement(Icon, {
        style: [{
          backgroundColor: 'transparent'
        }, iconStyle && iconStyle],
        size: size,
        name: name,
        color: reverse ? reverseColor : color
      })
    );
  };

  Icon.propTypes = {
    type: _propTypes2.default.string,
    name: _propTypes2.default.string,
    size: _propTypes2.default.number,
    color: _propTypes2.default.string,
    component: _propTypes2.default.func,
    underlayColor: _propTypes2.default.string,
    reverse: _propTypes2.default.bool,
    raised: _propTypes2.default.bool,
    containerStyle: _ViewPropTypes2.default.style,
    iconStyle: _reactNative.Text.propTypes.style,
    onPress: _propTypes2.default.func,
    reverseColor: _propTypes2.default.string
  };
  Icon.defaultProps = {
    underlayColor: 'white',
    reverse: false,
    raised: false,
    size: 24,
    color: 'black',
    reverseColor: 'white'
  };

  var styles = _reactNative.StyleSheet.create({
    button: {
      margin: 7
    },
    raised: babelHelpers.extends({}, {
      shadowColor: 'rgba(0,0,0, .4)',
      shadowOffset: {
        height: 1,
        width: 1
      },
      shadowOpacity: 1,
      shadowRadius: 1
    })
  });

  exports.default = Icon;
});