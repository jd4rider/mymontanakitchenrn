__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AdIconViewContext = exports.MediaViewContext = exports.TriggerableContext = undefined;

  var _react = _require(_dependencyMap[0]);

  var React = babelHelpers.interopRequireWildcard(_react);

  var _fbemitter = _require(_dependencyMap[1]);

  var _reactNative = _require(_dependencyMap[2]);

  var _NativeAdsManager = _require(_dependencyMap[3]);

  var _NativeAdsManager2 = babelHelpers.interopRequireDefault(_NativeAdsManager);

  var _AdIconViewManager = _require(_dependencyMap[4]);

  var _MediaViewManager = _require(_dependencyMap[5]);

  var NativeAdView = (0, _reactNative.requireNativeComponent)('CTKNativeAd', null);
  var defaultValue = {
    register: null,
    unregister: null
  };
  var TriggerableContext = exports.TriggerableContext = React.createContext(defaultValue);
  var MediaViewContext = exports.MediaViewContext = React.createContext(defaultValue);
  var AdIconViewContext = exports.AdIconViewContext = React.createContext(defaultValue);

  exports.default = function (Component) {
    return function (_React$Component) {
      babelHelpers.inherits(NativeAdWrapper, _React$Component);

      function NativeAdWrapper(props) {
        babelHelpers.classCallCheck(this, NativeAdWrapper);

        var _this = babelHelpers.possibleConstructorReturn(this, (NativeAdWrapper.__proto__ || Object.getPrototypeOf(NativeAdWrapper)).call(this, props));

        _this._registerMediaView = function (mediaView) {
          return _this.setState({
            mediaViewNodeHandle: (0, _reactNative.findNodeHandle)(mediaView)
          });
        };

        _this._unregisterMediaView = function () {
          return _this.setState({
            mediaViewNodeHandle: -1
          });
        };

        _this._registerAdIconView = function (adIconView) {
          return _this.setState({
            adIconViewNodeHandle: (0, _reactNative.findNodeHandle)(adIconView)
          });
        };

        _this._unregisterAdIconView = function () {
          return _this.setState({
            adIconViewNodeHandle: -1
          });
        };

        _this._registerClickableChild = function (child) {
          _this._clickableChildrenNodeHandles.set(child, (0, _reactNative.findNodeHandle)(child));

          _this.setState({
            clickableChildren: _this.state.clickableChildren.add((0, _reactNative.findNodeHandle)(child))
          });
        };

        _this._unregisterClickableChild = function (child) {
          _this.setState(function (_ref) {
            var clickableChildren = _ref.clickableChildren;
            var newClickableChildren = new Set(clickableChildren);

            var nodeHandle = _this._clickableChildrenNodeHandles.get(child);

            if (nodeHandle) {
              newClickableChildren.delete(nodeHandle);

              _this._clickableChildrenNodeHandles.delete(child);

              return {
                clickableChildren: newClickableChildren
              };
            }
          });
        };

        _this._onTriggerEvent = function () {
          if (_this.state.mediaViewNodeHandle !== -1 && false) {
            _NativeAdsManager2.default.triggerEvent((0, _reactNative.findNodeHandle)(_this._nativeAdViewRef));
          }
        };

        _this._handleAdUpdated = function () {
          return _this.props.onAdLoaded && _this.props.onAdLoaded(_this.state.ad);
        };

        _this._handleAdLoaded = function (_ref2) {
          var nativeEvent = _ref2.nativeEvent;

          _this.setState({
            ad: nativeEvent
          }, _this._handleAdUpdated);
        };

        _this._handleNativeAdViewMount = function (ref) {
          _this._nativeAdViewRef = ref;
        };

        _this._registerFunctionsForTriggerables = {
          register: _this._registerClickableChild,
          unregister: _this._unregisterClickableChild,
          onTriggerEvent: _this._onTriggerEvent
        };
        _this._registerFunctionsForMediaView = {
          unregister: _this._unregisterMediaView,
          register: _this._registerMediaView
        };
        _this._registerFunctionsForAdIconView = {
          unregister: _this._unregisterAdIconView,
          register: _this._registerAdIconView
        };
        _this._clickableChildrenNodeHandles = new Map();
        _this.state = {
          ad: null,
          mediaViewNodeHandle: -1,
          adIconViewNodeHandle: -1,
          clickableChildren: new Set(),
          canRequestAds: false
        };
        return _this;
      }

      babelHelpers.createClass(NativeAdWrapper, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          this._subscription = this.props.adsManager.onAdsLoaded(function () {
            return _this2.setState({
              canRequestAds: true
            });
          });
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps, prevState) {
          var _this3 = this;

          if (this.state.mediaViewNodeHandle !== -1) {
            var mediaViewNodeHandleChanged = this.state.mediaViewNodeHandle !== prevState.mediaViewNodeHandle;
            var adIconViewNodeHandleChanged = this.state.adIconViewNodeHandle !== prevState.adIconViewNodeHandle;
            var clickableChildrenDiff = [].concat(babelHelpers.toConsumableArray(prevState.clickableChildren)).filter(function (child) {
              return !_this3.state.clickableChildren.has(child);
            });
            var clickableChildrenChanged = prevState.clickableChildren.size !== this.state.clickableChildren.size || clickableChildrenDiff.length > 0;

            if (mediaViewNodeHandleChanged || adIconViewNodeHandleChanged || clickableChildrenChanged) {
              _NativeAdsManager2.default.registerViewsForInteractionAsync((0, _reactNative.findNodeHandle)(this._nativeAdViewRef), this.state.mediaViewNodeHandle, this.state.adIconViewNodeHandle, [].concat(babelHelpers.toConsumableArray(this.state.clickableChildren)));
            }
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (this._subscription) {
            this._subscription.remove();
          }
        }
      }, {
        key: "renderAdComponent",
        value: function renderAdComponent(componentProps) {
          if (this.state.ad) {
            return React.createElement(
              AdIconViewContext.Provider,
              {
                value: this._registerFunctionsForAdIconView
              },
              React.createElement(
                MediaViewContext.Provider,
                {
                  value: this._registerFunctionsForMediaView
                },
                React.createElement(
                  TriggerableContext.Provider,
                  {
                    value: this._registerFunctionsForTriggerables
                  },
                  React.createElement(Component, babelHelpers.extends({}, componentProps, {
                    nativeAd: this.state.ad
                  }))
                )
              )
            );
          }

          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var _props = this.props,
              adsManager = _props.adsManager,
              props = babelHelpers.objectWithoutProperties(_props, ["adsManager"]);
          delete props.onAdLoaded;

          if (!this.state.canRequestAds) {
            return null;
          }

          return React.createElement(
            NativeAdView,
            {
              ref: this._handleNativeAdViewMount,
              adsManager: adsManager.toJSON(),
              onAdLoaded: this._handleAdLoaded
            },
            this.renderAdComponent(props)
          );
        }
      }]);
      return NativeAdWrapper;
    }(React.Component);
  };
});