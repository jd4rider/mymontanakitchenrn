__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../node_modules/react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "/home/jd4rider/Documents/Projects/mymontanakitchenrn/screens/HomeScreen.js";

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _reactNativeElements = _require(_dependencyMap[3], "react-native-elements");

  var _expo = _require(_dependencyMap[4], "expo");

  var _StyledText = _require(_dependencyMap[5], "../components/StyledText");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    HomeScreen: {
      displayName: "HomeScreen"
    }
  };

  var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/jd4rider/Documents/Projects/mymontanakitchenrn/screens/HomeScreen.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var HomeScreen = _wrapComponent("HomeScreen")((_temp2 = _class = function (_React$Component) {
    _inherits(HomeScreen, _React$Component);

    function HomeScreen() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, HomeScreen);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = HomeScreen.__proto__ || Object.getPrototypeOf(HomeScreen)).call.apply(_ref, [this].concat(args))), _this), _this._handleLearnMorePress = function () {
        _expo.WebBrowser.openBrowserAsync('https://docs.expo.io/versions/latest/guides/development-mode');
      }, _this._handleHelpPress = function () {
        _expo.WebBrowser.openBrowserAsync('https://docs.expo.io/versions/latest/guides/up-and-running.html#can-t-see-your-changes');
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(HomeScreen, [{
      key: "render",
      value: function render() {
        return _react3.default.createElement(
          _reactNative.ImageBackground,
          {
            source: _require(_dependencyMap[6], '../assets/images/mymontpic.png'),
            style: {
              width: '100%',
              height: '100%'
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 25
            }
          },
          _react3.default.createElement(_reactNativeElements.Header, {
            statusBarProps: {
              barStyle: 'light-content'
            },
            backgroundColor: "#9E364A",
            leftComponent: {
              icon: 'menu',
              color: '#fff'
            },
            centerComponent: {
              text: 'My Montana Kitchen',
              style: {
                color: '#fff'
              }
            },
            outerContainerStyles: {
              height: 90
            },
            rightComponent: {
              icon: 'settings',
              color: '#fff'
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 29
            }
          }),
          _react3.default.createElement(
            _reactNative.ScrollView,
            {
              style: styles.container,
              contentContainerStyle: styles.contentContainer,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 37
              }
            },
            _react3.default.createElement(
              _reactNative.View,
              {
                style: styles.welcomeContainer,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 38
                }
              },
              _react3.default.createElement(_reactNative.Image, {
                source: __DEV__ ? _require(_dependencyMap[7], '../assets/images/mymontkitchen.png') : _require(_dependencyMap[7], '../assets/images/mymontkitchen.png'),
                style: styles.welcomeImage,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 39
                }
              })
            ),
            _react3.default.createElement(
              _reactNative.View,
              {
                style: styles.buttoncont,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 49
                }
              },
              _react3.default.createElement(_reactNativeElements.Button, {
                raised: true,
                title: "Recipes",
                backgroundColor: "#9E364A",
                buttonStyle: styles.button,
                rounded: true,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 50
                }
              }),
              _react3.default.createElement(
                _reactNative.Text,
                {
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 57
                  }
                },
                "     "
              ),
              _react3.default.createElement(_reactNativeElements.Button, {
                raised: true,
                title: "Videos",
                backgroundColor: "#82665C",
                buttonStyle: styles.button,
                rounded: true,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 58
                }
              })
            )
          )
        );
      }
    }, {
      key: "_maybeRenderDevelopmentModeWarning",
      value: function _maybeRenderDevelopmentModeWarning() {
        if (__DEV__) {
          var learnMoreButton = _react3.default.createElement(
            _reactNative.Text,
            {
              onPress: this._handleLearnMorePress,
              style: styles.helpLinkText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 103
              }
            },
            "Learn more"
          );

          return _react3.default.createElement(
            _reactNative.Text,
            {
              style: styles.developmentModeText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 109
              }
            },
            "Development mode is enabled, your app will be slower but you can use useful development tools. ",
            learnMoreButton
          );
        } else {
          return _react3.default.createElement(
            _reactNative.Text,
            {
              style: styles.developmentModeText,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 116
              }
            },
            "You are not in development mode, your app will run at full speed."
          );
        }
      }
    }]);

    return HomeScreen;
  }(_react3.default.Component), _class.navigationOptions = {
    header: null
  }, _temp2));

  exports.default = HomeScreen;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    buttoncont: {
      alignItems: 'center',
      justifyContent: 'center'
    },
    developmentModeText: {
      marginBottom: 20,
      color: 'rgba(0,0,0,0.4)',
      fontSize: 14,
      lineHeight: 19,
      textAlign: 'center'
    },
    contentContainer: {
      paddingTop: 30
    },
    welcomeContainer: {
      alignItems: 'center',
      justifyContent: 'center',
      marginTop: 10,
      marginBottom: 20
    },
    welcomeImage: {
      width: 200,
      height: 160,
      resizeMode: 'contain',
      marginTop: 3,
      marginLeft: -10
    },
    getStartedContainer: {
      alignItems: 'center',
      marginHorizontal: 50
    },
    homeScreenFilename: {
      marginVertical: 7
    },
    codeHighlightText: {
      color: 'rgba(96,100,109, 0.8)'
    },
    codeHighlightContainer: {
      backgroundColor: 'rgba(0,0,0,0.05)',
      borderRadius: 3,
      paddingHorizontal: 4
    },
    getStartedText: {
      fontSize: 17,
      color: 'rgba(96,100,109, 1)',
      lineHeight: 24,
      textAlign: 'center'
    },
    tabBarInfoContainer: _extends({
      position: 'absolute',
      bottom: 0,
      left: 0,
      right: 0
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: 'black',
        shadowOffset: {
          height: -3
        },
        shadowOpacity: 0.1,
        shadowRadius: 3
      },
      android: {
        elevation: 20
      }
    }), {
      alignItems: 'center',
      backgroundColor: '#fbfbfb',
      paddingVertical: 20
    }),
    tabBarInfoText: {
      fontSize: 17,
      color: 'rgba(96,100,109, 1)',
      textAlign: 'center'
    },
    navigationFilename: {
      marginTop: 5
    },
    helpContainer: {
      marginTop: 15,
      alignItems: 'center'
    },
    helpLink: {
      paddingVertical: 15
    },
    helpLinkText: {
      fontSize: 14,
      color: '#2e78b7'
    },
    button: {
      width: 290,
      height: 60
    }
  });
});