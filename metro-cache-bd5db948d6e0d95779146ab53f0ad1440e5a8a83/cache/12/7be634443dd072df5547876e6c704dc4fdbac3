__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var _ViewPropTypes = _require(_dependencyMap[3]);

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var _Icon = _require(_dependencyMap[4]);

  var _Icon2 = babelHelpers.interopRequireDefault(_Icon);

  var _Text = _require(_dependencyMap[5]);

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var DEFAULT_COLORS = ['#000', '#333', '#555', '#888', '#aaa', '#ddd'];

  var Avatar = function Avatar(props) {
    var component = props.component,
        onPress = props.onPress,
        onLongPress = props.onLongPress,
        containerStyle = props.containerStyle,
        icon = props.icon,
        iconStyle = props.iconStyle,
        source = props.source,
        small = props.small,
        medium = props.medium,
        large = props.large,
        xlarge = props.xlarge,
        avatarStyle = props.avatarStyle,
        rounded = props.rounded,
        title = props.title,
        titleStyle = props.titleStyle,
        overlayContainerStyle = props.overlayContainerStyle,
        activeOpacity = props.activeOpacity,
        showEditButton = props.showEditButton,
        editButton = props.editButton,
        onEditPress = props.onEditPress,
        imageProps = props.imageProps,
        attributes = babelHelpers.objectWithoutProperties(props, ["component", "onPress", "onLongPress", "containerStyle", "icon", "iconStyle", "source", "small", "medium", "large", "xlarge", "avatarStyle", "rounded", "title", "titleStyle", "overlayContainerStyle", "activeOpacity", "showEditButton", "editButton", "onEditPress", "imageProps"]);
    var width = props.width,
        height = props.height;

    if (small) {
      width = 34;
      height = 34;
    } else if (medium) {
      width = 50;
      height = 50;
    } else if (large) {
      width = 75;
      height = 75;
    } else if (xlarge) {
      width = 150;
      height = 150;
    } else if (!width && !height) {
      width = 34;
      height = 34;
    } else if (!width) {
      width = height;
    } else if (!height) {
      height = width;
    }

    var titleSize = width / 2;
    var iconSize = width / 2;
    var Component = onPress || onLongPress ? _reactNative.TouchableOpacity : _reactNative.View;

    if (component) {
      Component = component;
    }

    var renderUtils = function renderUtils() {
      if (showEditButton) {
        var editButtonProps = babelHelpers.extends({}, editButton);
        var defaultEditButtonSize = (width + height) / 2 / 3;
        var editButtonSize = editButton.size || defaultEditButtonSize;
        var editButtonSizeStyle = {
          width: editButtonSize,
          height: editButtonSize,
          borderRadius: editButtonSize / 2
        };
        var editButtonIconSize = editButtonSize * 0.8;
        return _react2.default.createElement(
          _reactNative.TouchableHighlight,
          {
            style: [styles.editButton, editButtonSizeStyle, editButtonProps.style],
            underlayColor: editButtonProps.underlayColor,
            onPress: onEditPress
          },
          _react2.default.createElement(
            _reactNative.View,
            null,
            _react2.default.createElement(_Icon2.default, {
              size: editButtonIconSize,
              name: editButtonProps.iconName,
              type: editButtonProps.iconType,
              color: editButtonProps.iconColor
            })
          )
        );
      }
    };

    var renderContent = function renderContent() {
      if (source) {
        return _react2.default.createElement(_reactNative.Image, babelHelpers.extends({
          style: [styles.avatar, rounded && {
            borderRadius: width / 2
          }, avatarStyle && avatarStyle],
          source: source
        }, imageProps));
      } else if (title) {
        return _react2.default.createElement(
          _Text2.default,
          {
            style: [styles.title, titleStyle && titleStyle]
          },
          title
        );
      } else if (icon) {
        return _react2.default.createElement(_Icon2.default, {
          style: iconStyle && iconStyle,
          color: icon.color || 'white',
          name: icon.name || 'user',
          size: icon.size || iconSize,
          type: icon.type && icon.type
        });
      }
    };

    var styles = _reactNative.StyleSheet.create({
      container: {
        paddingTop: 10,
        paddingRight: 10,
        paddingBottom: 10,
        backgroundColor: 'transparent',
        width: width,
        height: height
      },
      avatar: {
        width: width,
        height: height
      },
      overlayContainer: {
        flex: 1,
        alignItems: 'center',
        backgroundColor: 'rgba(0,0,0,0.2)',
        alignSelf: 'stretch',
        justifyContent: 'center',
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      },
      title: {
        color: '#ffffff',
        fontSize: titleSize,
        backgroundColor: 'rgba(0,0,0,0)',
        textAlign: 'center'
      },
      editButton: babelHelpers.extends({
        position: 'absolute',
        bottom: 0,
        right: 0,
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: DEFAULT_COLORS[4]
      }, {
        shadowColor: DEFAULT_COLORS[0],
        shadowOffset: {
          width: 1,
          height: 1
        },
        shadowRadius: 2,
        shadowOpacity: 0.5
      })
    });

    return _react2.default.createElement(
      Component,
      babelHelpers.extends({}, attributes, {
        onPress: onPress,
        onLongPress: onLongPress,
        activeOpacity: activeOpacity,
        style: [styles.container, rounded && {
          borderRadius: width / 2
        }, containerStyle && containerStyle]
      }),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.overlayContainer, rounded && {
            borderRadius: width / 2
          }, overlayContainerStyle && overlayContainerStyle]
        },
        renderContent()
      ),
      renderUtils()
    );
  };

  var defaultProps = {
    showEditButton: false,
    onEditPress: null,
    editButton: {
      size: null,
      iconName: 'mode-edit',
      iconType: 'material',
      iconColor: '#fff',
      underlayColor: DEFAULT_COLORS[0],
      style: null
    }
  };
  Avatar.propTypes = {
    component: _propTypes2.default.oneOf([_reactNative.View, _reactNative.TouchableOpacity, _reactNative.TouchableHighlight, _reactNative.TouchableNativeFeedback, _reactNative.TouchableWithoutFeedback]),
    width: _propTypes2.default.number,
    height: _propTypes2.default.number,
    onPress: _propTypes2.default.func,
    onLongPress: _propTypes2.default.func,
    containerStyle: _propTypes2.default.any,
    source: _reactNative.Image.propTypes.source,
    avatarStyle: _propTypes2.default.any,
    rounded: _propTypes2.default.bool,
    title: _propTypes2.default.string,
    titleStyle: _reactNative.Text.propTypes.style,
    overlayContainerStyle: _propTypes2.default.any,
    activeOpacity: _propTypes2.default.number,
    icon: _propTypes2.default.object,
    iconStyle: _reactNative.Text.propTypes.style,
    small: _propTypes2.default.bool,
    medium: _propTypes2.default.bool,
    large: _propTypes2.default.bool,
    xlarge: _propTypes2.default.bool,
    showEditButton: _propTypes2.default.bool,
    onEditPress: _propTypes2.default.func,
    editButton: _propTypes2.default.shape({
      size: _propTypes2.default.number,
      iconName: _propTypes2.default.string,
      iconType: _propTypes2.default.string,
      iconColor: _propTypes2.default.string,
      underlayColor: _propTypes2.default.string,
      style: _ViewPropTypes2.default.style
    }),
    imageProps: _propTypes2.default.object
  };
  Avatar.defaultProps = defaultProps;
  exports.default = Avatar;
});