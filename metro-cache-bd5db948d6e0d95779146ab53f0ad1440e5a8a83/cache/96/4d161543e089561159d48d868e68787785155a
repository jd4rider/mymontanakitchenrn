__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var TouchableComponent = void 0;
  {
    TouchableComponent = _reactNative.TouchableOpacity;
  }

  if (TouchableComponent !== _reactNative.TouchableNativeFeedback) {
    TouchableComponent.SelectableBackground = function () {
      return {};
    };

    TouchableComponent.SelectableBackgroundBorderless = function () {
      return {};
    };

    TouchableComponent.Ripple = function () {
      return {};
    };

    TouchableComponent.canUseNativeForeground = function () {
      return false;
    };
  }

  var PlatformTouchable = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(PlatformTouchable, _React$Component);

    function PlatformTouchable() {
      babelHelpers.classCallCheck(this, PlatformTouchable);
      return babelHelpers.possibleConstructorReturn(this, (PlatformTouchable.__proto__ || Object.getPrototypeOf(PlatformTouchable)).apply(this, arguments));
    }

    babelHelpers.createClass(PlatformTouchable, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            style = _props.style,
            foreground = _props.foreground,
            background = _props.background,
            useForeground = _props.useForeground,
            props = babelHelpers.objectWithoutProperties(_props, ["children", "style", "foreground", "background", "useForeground"]);
        children = _react2.default.Children.only(children);

        if (TouchableComponent === _reactNative.TouchableNativeFeedback) {
          useForeground = foreground && _reactNative.TouchableNativeFeedback.canUseNativeForeground();

          if (foreground && background) {
            console.warn('Specified foreground and background for Touchable, only one can be used at a time. Defaulted to foreground.');
          }

          return _react2.default.createElement(
            TouchableComponent,
            babelHelpers.extends({}, props, {
              useForeground: useForeground,
              background: useForeground && foreground || background
            }),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: style
              },
              children
            )
          );
        } else if (TouchableComponent === _reactNative.TouchableWithoutFeedback) {
          return _react2.default.createElement(
            _reactNative.TouchableWithoutFeedback,
            props,
            _react2.default.createElement(
              _reactNative.View,
              {
                style: style
              },
              children
            )
          );
        } else {
          var TouchableFallback = this.props.fallback || TouchableComponent;
          return _react2.default.createElement(
            TouchableFallback,
            babelHelpers.extends({}, props, {
              style: style
            }),
            children
          );
        }
      }
    }]);
    return PlatformTouchable;
  }(_react2.default.Component), _class.SelectableBackground = TouchableComponent.SelectableBackground, _class.SelectableBackgroundBorderless = TouchableComponent.SelectableBackgroundBorderless, _class.Ripple = TouchableComponent.Ripple, _class.canUseNativeForeground = TouchableComponent.canUseNativeForeground, _temp);
  exports.default = PlatformTouchable;
});