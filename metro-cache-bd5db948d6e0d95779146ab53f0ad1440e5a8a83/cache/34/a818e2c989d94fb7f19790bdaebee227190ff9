__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var arrays = _require(_dependencyMap[0]),
      GrammarError = _require(_dependencyMap[1]),
      asts = _require(_dependencyMap[2]),
      visitor = _require(_dependencyMap[3]);

  function reportInfiniteRecursion(ast) {
    var visitedRules = [];
    var check = visitor.build({
      rule: function rule(node) {
        visitedRules.push(node.name);
        check(node.expression);
        visitedRules.pop(node.name);
      },
      sequence: function sequence(node) {
        arrays.every(node.elements, function (element) {
          check(element);
          return !asts.alwaysConsumesOnSuccess(ast, element);
        });
      },
      rule_ref: function rule_ref(node) {
        if (arrays.contains(visitedRules, node.name)) {
          visitedRules.push(node.name);
          throw new GrammarError("Possible infinite loop when parsing (left recursion: " + visitedRules.join(" -> ") + ").", node.location);
        }

        check(asts.findRule(ast, node.name));
      }
    });
    check(ast);
  }

  module.exports = reportInfiniteRecursion;
});