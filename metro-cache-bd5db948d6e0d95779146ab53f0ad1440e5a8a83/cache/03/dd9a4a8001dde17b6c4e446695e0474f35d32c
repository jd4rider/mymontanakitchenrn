__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var _Text = _require(_dependencyMap[3]);

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var _Icon = _require(_dependencyMap[4]);

  var _Icon2 = babelHelpers.interopRequireDefault(_Icon);

  var _FeaturedTile = _require(_dependencyMap[5]);

  var _FeaturedTile2 = babelHelpers.interopRequireDefault(_FeaturedTile);

  var _ViewPropTypes = _require(_dependencyMap[6]);

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var _BackgroundImage = _require(_dependencyMap[7]);

  var _BackgroundImage2 = babelHelpers.interopRequireDefault(_BackgroundImage);

  var Tile = function Tile(props) {
    var featured = props.featured,
        imageSrc = props.imageSrc,
        icon = props.icon,
        title = props.title,
        children = props.children,
        caption = props.caption,
        titleStyle = props.titleStyle,
        onPress = props.onPress,
        activeOpacity = props.activeOpacity,
        overlayContainerStyle = props.overlayContainerStyle,
        captionStyle = props.captionStyle,
        iconContainerStyle = props.iconContainerStyle,
        imageContainerStyle = props.imageContainerStyle,
        containerStyle = props.containerStyle,
        contentContainerStyle = props.contentContainerStyle,
        titleNumberOfLines = props.titleNumberOfLines,
        attributes = babelHelpers.objectWithoutProperties(props, ["featured", "imageSrc", "icon", "title", "children", "caption", "titleStyle", "onPress", "activeOpacity", "overlayContainerStyle", "captionStyle", "iconContainerStyle", "imageContainerStyle", "containerStyle", "contentContainerStyle", "titleNumberOfLines"]);
    var width = props.width,
        height = props.height;

    if (!width) {
      width = _reactNative.Dimensions.get('window').width;
    }

    if (!height) {
      height = width * 0.8;
    }

    var styles = _reactNative.StyleSheet.create({
      container: {
        width: width,
        height: height
      },
      imageContainer: {
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: '#ffffff',
        flex: 2
      },
      text: {
        backgroundColor: 'rgba(0,0,0,0)',
        marginBottom: 5
      },
      contentContainer: {
        paddingTop: 15,
        paddingBottom: 5,
        paddingLeft: 15,
        paddingRight: 15
      },
      iconContainer: {
        justifyContent: 'center',
        alignItems: 'center',
        alignSelf: 'center'
      }
    });

    if (featured) {
      var featuredProps = {
        title: title,
        icon: icon,
        caption: caption,
        imageSrc: imageSrc,
        onPress: onPress,
        activeOpacity: activeOpacity,
        containerStyle: containerStyle,
        imageContainerStyle: imageContainerStyle,
        overlayContainerStyle: overlayContainerStyle,
        titleStyle: titleStyle,
        captionStyle: captionStyle,
        width: width,
        height: height
      };
      return _react2.default.createElement(_FeaturedTile2.default, featuredProps);
    }

    return _react2.default.createElement(
      _reactNative.TouchableOpacity,
      babelHelpers.extends({}, attributes, {
        onPress: onPress,
        style: [styles.container, containerStyle && containerStyle]
      }),
      _react2.default.createElement(
        _BackgroundImage2.default,
        {
          source: imageSrc,
          style: [styles.imageContainer, imageContainerStyle && imageContainerStyle],
          resizeMode: "cover"
        },
        _react2.default.createElement(
          _reactNative.View,
          {
            style: [styles.iconContainer, iconContainerStyle && iconContainerStyle]
          },
          icon && _react2.default.createElement(_Icon2.default, icon)
        )
      ),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.contentContainer, contentContainerStyle && contentContainerStyle]
        },
        _react2.default.createElement(
          _Text2.default,
          {
            h4: true,
            style: [styles.text, titleStyle && titleStyle],
            numberOfLines: titleNumberOfLines
          },
          title
        ),
        children
      )
    );
  };

  Tile.propTypes = {
    title: _propTypes2.default.string,
    icon: _propTypes2.default.object,
    caption: _propTypes2.default.string,
    imageSrc: _reactNative.Image.propTypes.source,
    onPress: _propTypes2.default.func,
    activeOpacity: _propTypes2.default.number,
    containerStyle: _ViewPropTypes2.default.style,
    imageContainerStyle: _ViewPropTypes2.default.style,
    iconContainerStyle: _ViewPropTypes2.default.style,
    overlayContainerStyle: _ViewPropTypes2.default.style,
    titleStyle: _reactNative.Text.propTypes.style,
    captionStyle: _reactNative.Text.propTypes.style,
    width: _propTypes2.default.number,
    height: _propTypes2.default.number,
    featured: _propTypes2.default.bool,
    children: _propTypes2.default.any,
    contentContainerStyle: _ViewPropTypes2.default.style,
    titleNumberOfLines: _propTypes2.default.number
  };
  exports.default = Tile;
});