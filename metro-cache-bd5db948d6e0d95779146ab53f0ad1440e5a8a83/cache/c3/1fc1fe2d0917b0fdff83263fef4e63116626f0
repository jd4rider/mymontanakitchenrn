__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var _colors = _require(_dependencyMap[3]);

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _Text = _require(_dependencyMap[4]);

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var _normalizeText = _require(_dependencyMap[5]);

  var _normalizeText2 = babelHelpers.interopRequireDefault(_normalizeText);

  var _ViewPropTypes = _require(_dependencyMap[6]);

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var ButtonGroup = function ButtonGroup(props) {
    var component = props.component,
        buttons = props.buttons,
        onPress = props.onPress,
        selectedIndex = props.selectedIndex,
        containerStyle = props.containerStyle,
        innerBorderStyle = props.innerBorderStyle,
        lastBorderStyle = props.lastBorderStyle,
        buttonStyle = props.buttonStyle,
        textStyle = props.textStyle,
        selectedTextStyle = props.selectedTextStyle,
        selectedButtonStyle = props.selectedButtonStyle,
        underlayColor = props.underlayColor,
        activeOpacity = props.activeOpacity,
        onHideUnderlay = props.onHideUnderlay,
        onShowUnderlay = props.onShowUnderlay,
        setOpacityTo = props.setOpacityTo,
        containerBorderRadius = props.containerBorderRadius,
        disableSelected = props.disableSelected,
        attributes = babelHelpers.objectWithoutProperties(props, ["component", "buttons", "onPress", "selectedIndex", "containerStyle", "innerBorderStyle", "lastBorderStyle", "buttonStyle", "textStyle", "selectedTextStyle", "selectedButtonStyle", "underlayColor", "activeOpacity", "onHideUnderlay", "onShowUnderlay", "setOpacityTo", "containerBorderRadius", "disableSelected"]);
    var Component = component || _reactNative.TouchableHighlight;
    return _react2.default.createElement(
      _reactNative.View,
      babelHelpers.extends({}, attributes, {
        style: [styles.container, containerStyle && containerStyle]
      }),
      buttons.map(function (button, i) {
        var containerRadius = !isNaN(containerBorderRadius) ? containerBorderRadius : 3;
        return _react2.default.createElement(
          Component,
          {
            activeOpacity: activeOpacity,
            setOpacityTo: setOpacityTo,
            onHideUnderlay: onHideUnderlay,
            onShowUnderlay: onShowUnderlay,
            underlayColor: underlayColor || '#ffffff',
            disabled: disableSelected && i === selectedIndex ? true : false,
            onPress: onPress ? function () {
              return onPress(i);
            } : function () {},
            key: i,
            style: [styles.button, i < buttons.length - 1 && {
              borderRightWidth: i === 0 ? 0 : innerBorderStyle && innerBorderStyle.width || 1,
              borderRightColor: innerBorderStyle && innerBorderStyle.color || _colors2.default.grey4
            }, i === 1 && {
              borderLeftWidth: innerBorderStyle && innerBorderStyle.width || 1,
              borderLeftColor: innerBorderStyle && innerBorderStyle.color || _colors2.default.grey4
            }, i === buttons.length - 1 && babelHelpers.extends({}, lastBorderStyle, {
              borderTopRightRadius: containerRadius,
              borderBottomRightRadius: containerRadius
            }), i === 0 && {
              borderTopLeftRadius: containerRadius,
              borderBottomLeftRadius: containerRadius
            }, selectedIndex === i && {
              backgroundColor: 'white'
            }]
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: [styles.textContainer, buttonStyle && buttonStyle, selectedIndex === i && selectedButtonStyle && selectedButtonStyle]
            },
            button.element ? _react2.default.createElement(button.element, null) : _react2.default.createElement(
              _Text2.default,
              {
                style: [styles.buttonText, textStyle && textStyle, selectedIndex === i && {
                  color: _colors2.default.grey1
                }, selectedIndex === i && selectedTextStyle]
              },
              button
            )
          )
        );
      })
    );
  };

  var styles = _reactNative.StyleSheet.create({
    button: {
      flex: 1
    },
    textContainer: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center'
    },
    container: {
      marginLeft: 10,
      marginRight: 10,
      marginBottom: 5,
      marginTop: 5,
      borderColor: '#e3e3e3',
      borderWidth: 1,
      flexDirection: 'row',
      borderRadius: 3,
      overflow: 'hidden',
      backgroundColor: '#f5f5f5',
      height: 40
    },
    buttonText: babelHelpers.extends({
      fontSize: (0, _normalizeText2.default)(13),
      color: _colors2.default.grey2
    }, undefined)
  });

  ButtonGroup.propTypes = {
    button: _propTypes2.default.object,
    component: _propTypes2.default.any,
    onPress: _propTypes2.default.func,
    buttons: _propTypes2.default.array,
    containerStyle: _ViewPropTypes2.default.style,
    textStyle: _reactNative.Text.propTypes.style,
    selectedTextStyle: _reactNative.Text.propTypes.style,
    selectedButtonStyle: _ViewPropTypes2.default.style,
    underlayColor: _propTypes2.default.string,
    selectedIndex: _propTypes2.default.number,
    activeOpacity: _propTypes2.default.number,
    onHideUnderlay: _propTypes2.default.func,
    onShowUnderlay: _propTypes2.default.func,
    setOpacityTo: _propTypes2.default.any,
    innerBorderStyle: _propTypes2.default.shape({
      color: _propTypes2.default.string,
      width: _propTypes2.default.number
    }),
    lastBorderStyle: _propTypes2.default.oneOfType([_ViewPropTypes2.default.style, _reactNative.Text.propTypes.style]),
    buttonStyle: _ViewPropTypes2.default.style,
    containerBorderRadius: _propTypes2.default.number,
    disableSelected: _propTypes2.default.bool
  };
  exports.default = ButtonGroup;
});