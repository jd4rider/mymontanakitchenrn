__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    exports.default = function (props) {
        if (!props.id) {
            return null;
        }

        var stops = {};

        _react.Children.forEach(props.children, function (child) {
            if (child.type === _Stop2.default) {
                if (child.props.stopColor && child.props.offset) {
                    var offset = (0, _percentToFloat2.default)(child.props.offset);
                    stops[offset] = (0, _color2.default)(child.props.stopColor).alpha((0, _extractOpacity2.default)(child.props.stopOpacity));
                }
            } else {
                console.warn('`Gradient` elements only accept `Stop` elements as children');
            }
        });

        var sorted = _lodash2.default.sortBy(_lodash2.default.map(stops, function (stop, offset) {
            return {
                stop: stop,
                offset: offset
            };
        }), 'offset');

        var gradient = [];
        sorted.forEach(function (_ref) {
            var stop = _ref.stop;

            var _stop$rgb$array = stop.rgb().array(),
                _stop$rgb$array2 = babelHelpers.slicedToArray(_stop$rgb$array, 4),
                r = _stop$rgb$array2[0],
                g = _stop$rgb$array2[1],
                b = _stop$rgb$array2[2],
                _stop$rgb$array2$ = _stop$rgb$array2[3],
                a = _stop$rgb$array2$ === undefined ? 1 : _stop$rgb$array2$;

            gradient.push(r / 255);
            gradient.push(g / 255);
            gradient.push(b / 255);
            gradient.push(a);
        });
        gradient.push.apply(gradient, babelHelpers.toConsumableArray(sorted.map(function (_ref2) {
            var offset = _ref2.offset;
            return +offset;
        })));
        var gradientTransform = void 0;

        if (props.gradientTransform) {
            gradientTransform = (0, _extractTransform2.default)(props.gradientTransform);
        } else if (props.transform) {
            gradientTransform = (0, _extractTransform2.default)(props.transform);
        } else {
            gradientTransform = (0, _extractTransform2.default)(props);
        }

        return {
            gradient: gradient,
            name: props.id,
            gradientTransform: gradientTransform,
            gradientUnits: _PATTERN_UNITS2.default[props.gradientUnits] || 0
        };
    };

    var _react = _require(_dependencyMap[0]);

    var _lodash = _require(_dependencyMap[1]);

    var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

    var _color = _require(_dependencyMap[2]);

    var _color2 = babelHelpers.interopRequireDefault(_color);

    var _extractOpacity = _require(_dependencyMap[3]);

    var _extractOpacity2 = babelHelpers.interopRequireDefault(_extractOpacity);

    var _extractTransform = _require(_dependencyMap[4]);

    var _extractTransform2 = babelHelpers.interopRequireDefault(_extractTransform);

    var _PATTERN_UNITS = _require(_dependencyMap[5]);

    var _PATTERN_UNITS2 = babelHelpers.interopRequireDefault(_PATTERN_UNITS);

    var _percentToFloat = _require(_dependencyMap[6]);

    var _percentToFloat2 = babelHelpers.interopRequireDefault(_percentToFloat);

    var _Stop = _require(_dependencyMap[7]);

    var _Stop2 = babelHelpers.interopRequireDefault(_Stop);
});