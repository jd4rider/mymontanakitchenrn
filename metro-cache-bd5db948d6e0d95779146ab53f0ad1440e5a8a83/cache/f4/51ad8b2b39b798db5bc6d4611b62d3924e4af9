__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _this = this;

  var _reactNative = _require(_dependencyMap[0]);

  var ExponentLocalization = _reactNative.NativeModules.ExponentLocalization;

  var isObject = function isObject(obj) {
    return obj && obj.constructor && obj.constructor === Object;
  };

  var LocaleStore = function LocaleStore(locales) {
    babelHelpers.classCallCheck(this, LocaleStore);

    if (isObject(locales) === false || Object.keys(locales).length <= 1) {
      throw new Error('Locales input must be an object and non-empty');
    }

    var copy = babelHelpers.extends({}, locales);
    var allGivenLocales = new Set(Object.keys(copy));
    var currentLocaleName = [].concat(babelHelpers.toConsumableArray(allGivenLocales))[0];
    var defaultLocale = copy[currentLocaleName];
    var defaultLocaleName = currentLocaleName;
    var defaultLocalePhrases = new Set(Object.keys(defaultLocale));
    var currentLocale = defaultLocale;

    var setLocaleHelper = function setLocaleHelper(newLocaleName, cb) {
      if (allGivenLocales.has(newLocaleName) === false) {}

      if (newLocaleName === currentLocaleName) {
        return;
      }

      currentLocale = copy[newLocaleName];
      currentLocaleName = newLocaleName;
      cb && cb();
    };

    var localizationValueHelper = function localizationValueHelper(name) {
      if (defaultLocalePhrases.has(name)) {
        var result = currentLocale[name];

        if (result !== undefined) {
          return result !== undefined ? result : defaultLocale[name];
        } else {
          var fallback = defaultLocale[name];

          if (fallback === undefined) {
            return '';
          }

          return fallback;
        }
      }
    };

    {
      var _ret = function () {
        var localizedValues = [];

        for (var _iterator = Object.values(copy), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator"]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var values = _ref;
          Object.keys(values).forEach(function (s) {
            return localizedValues.push(s);
          });
        }

        localizedValues = new Set(localizedValues);
        var proxy = {};
        Object.defineProperty(proxy, 'setLocale', {
          get: function get() {
            return setLocaleHelper;
          }
        });
        var methods = new Set(['setLocale']);

        var _loop = function _loop(name) {
          if (methods.has(name)) {
            throw new Error("Cannot use " + name + " as a locale name");
          }

          Object.defineProperty(proxy, name, {
            get: function get() {
              return localizationValueHelper(name);
            }
          });
        };

        for (var _iterator2 = localizedValues.keys(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator"]();;) {
          var _ref2;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref2 = _i2.value;
          }

          var name = _ref2;

          _loop(name);
        }

        return {
          v: proxy
        };
      }();

      if (typeof _ret === "object") return _ret.v;
    }
  };

  var getCurrentLocaleAsync = function getCurrentLocaleAsync() {
    return regeneratorRuntime.async(function getCurrentLocaleAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return regeneratorRuntime.awrap(ExponentLocalization.getCurrentLocaleAsync());

          case 2:
            return _context.abrupt("return", _context.sent.replace('-', '_'));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, _this);
  };

  exports.default = babelHelpers.extends({}, ExponentLocalization, {
    getCurrentLocaleAsync: getCurrentLocaleAsync,
    LocaleStore: LocaleStore
  });
});