__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp, _initialiseProps;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _invariant = _require(_dependencyMap[2]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _AnimatedEvent = _require(_dependencyMap[3]);

  var _reactNativeGestureHandler = _require(_dependencyMap[4]);

  var DRAG_TOSS = 0.05;
  var IDLE = 'Idle';
  var DRAGGING = 'Dragging';
  var SETTLING = 'Settling';
  var DrawerLayout = (_temp = _class = function (_Component) {
    babelHelpers.inherits(DrawerLayout, _Component);

    function DrawerLayout(props, context) {
      babelHelpers.classCallCheck(this, DrawerLayout);

      var _this = babelHelpers.possibleConstructorReturn(this, (DrawerLayout.__proto__ || Object.getPrototypeOf(DrawerLayout)).call(this, props, context));

      _initialiseProps.call(_this);

      var dragX = new _reactNative.Animated.Value(0);
      var touchX = new _reactNative.Animated.Value(0);
      var drawerTranslation = new _reactNative.Animated.Value(0);
      _this.state = {
        dragX: dragX,
        touchX: touchX,
        drawerTranslation: drawerTranslation,
        drawerShown: false,
        containerWidth: 0
      };

      _this._updateAnimatedEvent(props, _this.state);

      return _this;
    }

    babelHelpers.createClass(DrawerLayout, [{
      key: "componentWillUpdate",
      value: function componentWillUpdate(props, state) {
        if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {
          this._updateAnimatedEvent(props, state);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _state = this.state,
            drawerShown = _state.drawerShown,
            containerWidth = _state.containerWidth;
        var _props = this.props,
            drawerPosition = _props.drawerPosition,
            drawerType = _props.drawerType,
            edgeWidth = _props.edgeWidth,
            minSwipeDistance = _props.minSwipeDistance;
        var fromLeft = drawerPosition === 'left';
        var gestureOrientation = (fromLeft ? 1 : -1) * (drawerShown ? -1 : 1);
        var hitSlop = fromLeft ? {
          right: drawerShown ? 0 : edgeWidth - containerWidth
        } : {
          left: drawerShown ? 0 : edgeWidth - containerWidth
        };
        return _react2.default.createElement(
          _reactNativeGestureHandler.PanGestureHandler,
          {
            hitSlop: hitSlop,
            minOffsetX: gestureOrientation * minSwipeDistance,
            onGestureEvent: this._onGestureEvent,
            onHandlerStateChange: this._openingHandlerStateChange
          },
          this._renderDrawer()
        );
      }
    }]);
    return DrawerLayout;
  }(_react.Component), _class.defaultProps = {
    drawerWidth: 200,
    drawerPosition: 'left',
    useNativeAnimations: true,
    drawerType: 'front',
    edgeWidth: 20,
    minSwipeDistance: 3,
    overlayColor: 'black'
  }, _class.positions = {
    Left: 'left',
    Right: 'right'
  }, _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this._updateAnimatedEvent = function (props, state) {
      var drawerPosition = props.drawerPosition,
          drawerWidth = props.drawerWidth,
          drawerType = props.drawerType;
      var dragXValue = state.dragX,
          touchXValue = state.touchX,
          drawerTranslation = state.drawerTranslation,
          containerWidth = state.containerWidth;
      var dragX = dragXValue;
      var touchX = touchXValue;

      if (drawerPosition !== 'left') {
        dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue);
        touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue));
        touchXValue.setValue(containerWidth);
      } else {
        touchXValue.setValue(0);
      }

      var translationX = dragX;

      if (drawerType === 'front') {
        var startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));

        var dragOffsetFromOnStartPosition = startPositionX.interpolate({
          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],
          outputRange: [0, 0, 1]
        });
        translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition);
      }

      _this2._openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({
        inputRange: [0, drawerWidth],
        outputRange: [0, 1],
        extrapolate: 'clamp'
      });
      _this2._onGestureEvent = _reactNative.Animated.event([{
        nativeEvent: {
          translationX: dragXValue,
          x: touchXValue
        }
      }], {
        useNativeDriver: props.useNativeAnimations
      });
    };

    this._handleContainerLayout = function (_ref) {
      var nativeEvent = _ref.nativeEvent;

      _this2.setState({
        containerWidth: nativeEvent.layout.width
      });
    };

    this._emitStateChanged = function (newState, drawerWillShow) {
      _this2.props.onDrawerStateChanged && _this2.props.onDrawerStateChanged(newState, drawerWillShow);
    };

    this._openingHandlerStateChange = function (_ref2) {
      var nativeEvent = _ref2.nativeEvent;

      if (nativeEvent.oldState === _reactNativeGestureHandler.State.ACTIVE) {
        _this2._handleRelease(nativeEvent);
      } else if (nativeEvent.state === _reactNativeGestureHandler.State.ACTIVE) {
        _this2._emitStateChanged(DRAGGING, false);

        if (_this2.props.keyboardDismissMode === 'on-drag') {
          _reactNative.Keyboard.dismiss();
        }

        if (_this2.props.hideStatusBar) {
          _reactNative.StatusBar.setHidden(true, _this2.props.statusBarAnimation || 'slide');
        }
      }
    };

    this._onTapHandlerStateChange = function (_ref3) {
      var nativeEvent = _ref3.nativeEvent;

      if (_this2.state.drawerShown && nativeEvent.oldState === _reactNativeGestureHandler.State.ACTIVE) {
        _this2.closeDrawer();
      }
    };

    this._handleRelease = function (nativeEvent) {
      var _props2 = _this2.props,
          drawerWidth = _props2.drawerWidth,
          drawerPosition = _props2.drawerPosition,
          drawerType = _props2.drawerType;
      var _state2 = _this2.state,
          drawerShown = _state2.drawerShown,
          containerWidth = _state2.containerWidth;
      var dragX = nativeEvent.translationX,
          velocityX = nativeEvent.velocityX,
          touchX = nativeEvent.x;

      if (drawerPosition !== 'left') {
        dragX = -dragX;
        touchX = containerWidth - touchX;
        velocityX = -velocityX;
      }

      var gestureStartX = touchX - dragX;
      var dragOffsetBasedOnStart = 0;

      if (drawerType === 'front') {
        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;
      }

      var startOffsetX = dragX + dragOffsetBasedOnStart + (drawerShown ? drawerWidth : 0);
      var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;
      var shouldOpen = projOffsetX > drawerWidth / 2;

      if (shouldOpen) {
        _this2._animateDrawer(startOffsetX, drawerWidth, velocityX);
      } else {
        _this2._animateDrawer(startOffsetX, 0, velocityX);
      }
    };

    this._animateDrawer = function (fromValue, toValue, velocity) {
      _this2.state.dragX.setValue(0);

      _this2.state.touchX.setValue(_this2.props.drawerPosition === 'left' ? 0 : _this2.state.containerWidth);

      _this2.state.drawerTranslation.setValue(fromValue);

      var willShow = toValue !== 0;

      _this2.setState({
        drawerShown: willShow
      });

      _this2._emitStateChanged(SETTLING, willShow);

      if (_this2.props.hideStatusBar) {
        _reactNative.StatusBar.setHidden(willShow, _this2.props.statusBarAnimation || 'slide');
      }

      _reactNative.Animated.spring(_this2.state.drawerTranslation, {
        velocity: velocity,
        bounciness: 0,
        toValue: toValue,
        useNativeDriver: _this2.props.useNativeAnimations
      }).start(function (_ref4) {
        var finished = _ref4.finished;

        if (finished) {
          _this2._emitStateChanged(IDLE, willShow);

          if (willShow) {
            _this2.props.onDrawerOpen && _this2.props.onDrawerOpen();
          } else {
            _this2.props.onDrawerClose && _this2.props.onDrawerClose();
          }
        }
      });
    };

    this.openDrawer = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _this2._animateDrawer(0, _this2.props.drawerWidth, options.velocity ? options.velocity : 0);
    };

    this.closeDrawer = function () {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _this2._animateDrawer(_this2.props.drawerWidth, 0, options.velocity ? options.velocity : 0);
    };

    this._renderOverlay = function () {
      (0, _invariant2.default)(_this2._openValue, 'should be set');

      var overlayOpacity = _this2._openValue.interpolate({
        inputRange: [0, 1],
        outputRange: [0, 0.7],
        extrapolate: 'clamp'
      });

      var dynamicOverlayStyles = {
        opacity: overlayOpacity,
        backgroundColor: _this2.props.overlayColor
      };
      return _react2.default.createElement(
        _reactNativeGestureHandler.TapGestureHandler,
        {
          onHandlerStateChange: _this2._onTapHandlerStateChange
        },
        _react2.default.createElement(_reactNative.Animated.View, {
          pointerEvents: _this2.state.drawerShown ? 'auto' : 'none',
          style: [styles.overlay, dynamicOverlayStyles]
        })
      );
    };

    this._renderDrawer = function () {
      var drawerShown = _this2.state.drawerShown;
      var _props3 = _this2.props,
          drawerBackgroundColor = _props3.drawerBackgroundColor,
          drawerWidth = _props3.drawerWidth,
          drawerPosition = _props3.drawerPosition,
          drawerType = _props3.drawerType,
          contentContainerStyle = _props3.contentContainerStyle;
      var fromLeft = drawerPosition === 'left';
      var drawerSlide = drawerType !== 'back';
      var containerSlide = drawerType !== 'front';
      var dynamicDrawerStyles = {
        backgroundColor: drawerBackgroundColor,
        width: drawerWidth
      };
      var openValue = _this2._openValue;
      (0, _invariant2.default)(openValue, 'should be set');
      var containerStyles = void 0;

      if (containerSlide) {
        var containerTranslateX = openValue.interpolate({
          inputRange: [0, 1],
          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],
          extrapolate: 'clamp'
        });
        containerStyles = {
          transform: [{
            translateX: containerTranslateX
          }]
        };
      }

      var drawerTranslateX = 0;

      if (drawerSlide) {
        var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;
        drawerTranslateX = openValue.interpolate({
          inputRange: [0, 1],
          outputRange: [closedDrawerOffset, 0],
          extrapolate: 'clamp'
        });
      }

      var drawerStyles = {
        transform: [{
          translateX: drawerTranslateX
        }],
        flexDirection: fromLeft ? 'row' : 'row-reverse'
      };
      return _react2.default.createElement(
        _reactNative.Animated.View,
        {
          style: styles.main,
          onLayout: _this2._handleContainerLayout
        },
        _react2.default.createElement(
          _reactNative.Animated.View,
          {
            style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle]
          },
          typeof _this2.props.children === 'function' ? _this2.props.children(_this2._openValue) : _this2.props.children,
          _this2._renderOverlay()
        ),
        _react2.default.createElement(
          _reactNative.Animated.View,
          {
            pointerEvents: "box-none",
            accessibilityViewIsModal: drawerShown,
            style: [styles.drawerContainer, drawerStyles]
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: [styles.drawer, dynamicDrawerStyles]
            },
            _this2.props.renderNavigationView(_this2._openValue)
          )
        )
      );
    };
  }, _temp);
  exports.default = DrawerLayout;

  var styles = _reactNative.StyleSheet.create({
    drawer: {
      flex: 0
    },
    drawerContainer: babelHelpers.extends({}, _reactNative.StyleSheet.absoluteFillObject, {
      zIndex: 1001,
      flexDirection: 'row'
    }),
    containerInFront: babelHelpers.extends({}, _reactNative.StyleSheet.absoluteFillObject, {
      zIndex: 1002
    }),
    containerOnBack: babelHelpers.extends({}, _reactNative.StyleSheet.absoluteFillObject),
    main: {
      flex: 1,
      zIndex: 0,
      overflow: 'hidden'
    },
    overlay: babelHelpers.extends({}, _reactNative.StyleSheet.absoluteFillObject, {
      zIndex: 1000
    })
  });
});