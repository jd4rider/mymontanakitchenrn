__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _AnimatedValue = _require(_dependencyMap[0]);

  var _AnimatedValue2 = babelHelpers.interopRequireDefault(_AnimatedValue);

  var _Animation2 = _require(_dependencyMap[1]);

  var _Animation3 = babelHelpers.interopRequireDefault(_Animation2);

  var _SpringConfig = _require(_dependencyMap[2]);

  var _SpringConfig2 = babelHelpers.interopRequireDefault(_SpringConfig);

  var _spring = _require(_dependencyMap[3]);

  var _spring2 = babelHelpers.interopRequireDefault(_spring);

  var _base = _require(_dependencyMap[4]);

  var _AnimatedClock = _require(_dependencyMap[5]);

  var _AnimatedClock2 = babelHelpers.interopRequireDefault(_AnimatedClock);

  var _invariant = _require(_dependencyMap[6]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  function withDefault(value, defaultValue) {
    if (value === undefined || value === null) {
      return defaultValue;
    }

    return value;
  }

  var SpringAnimation = function (_Animation) {
    babelHelpers.inherits(SpringAnimation, _Animation);

    function SpringAnimation(config) {
      babelHelpers.classCallCheck(this, SpringAnimation);

      var _this = babelHelpers.possibleConstructorReturn(this, (SpringAnimation.__proto__ || Object.getPrototypeOf(SpringAnimation)).call(this));

      _this._overshootClamping = withDefault(config.overshootClamping, false);
      _this._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);
      _this._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);
      _this._initialVelocity = withDefault(config.velocity, 0);
      _this._lastVelocity = withDefault(config.velocity, 0);
      _this._toValue = config.toValue;
      _this._delay = withDefault(config.delay, 0);

      if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {
        (0, _invariant2.default)(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');
        _this._stiffness = withDefault(config.stiffness, 100);
        _this._damping = withDefault(config.damping, 10);
        _this._mass = withDefault(config.mass, 1);
      } else if (config.bounciness !== undefined || config.speed !== undefined) {
        (0, _invariant2.default)(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');

        var springConfig = _SpringConfig2.default.fromBouncinessAndSpeed(withDefault(config.bounciness, 8), withDefault(config.speed, 12));

        _this._stiffness = springConfig.stiffness;
        _this._damping = springConfig.damping;
        _this._mass = 1;
      } else {
        var _springConfig = _SpringConfig2.default.fromOrigamiTensionAndFriction(withDefault(config.tension, 40), withDefault(config.friction, 7));

        _this._stiffness = _springConfig.stiffness;
        _this._damping = _springConfig.damping;
        _this._mass = 1;
      }

      (0, _invariant2.default)(_this._stiffness > 0, 'Stiffness value must be greater than 0');
      (0, _invariant2.default)(_this._damping > 0, 'Damping value must be greater than 0');
      (0, _invariant2.default)(_this._mass > 0, 'Mass value must be greater than 0');
      return _this;
    }

    babelHelpers.createClass(SpringAnimation, [{
      key: "start",
      value: function start(value) {
        this._clock = new _AnimatedClock2.default();
        var state = {
          finished: new _AnimatedValue2.default(0),
          velocity: new _AnimatedValue2.default(this._initialVelocity),
          position: value,
          time: new _AnimatedValue2.default(0)
        };
        var config = {
          damping: this._damping,
          mass: this._mass,
          stiffness: this._stiffness,
          toValue: this._toValue,
          overshootClamping: this._overshootClamping,
          restSpeedThreshold: this._restSpeedThreshold,
          restDisplacementThreshold: this._restDisplacementThreshold
        };
        return (0, _base.block)([(0, _base.cond)((0, _base.clockRunning)(this._clock), 0, [(0, _base.startClock)(this._clock)]), (0, _spring2.default)(this._clock, state, config), (0, _base.cond)(state.finished, (0, _base.stopClock)(this._clock))]);
      }
    }, {
      key: "stop",
      value: function stop() {}
    }], [{
      key: "getDefaultState",
      value: function getDefaultState() {
        return {
          position: new _AnimatedValue2.default(0),
          finished: new _AnimatedValue2.default(0),
          velocity: new _AnimatedValue2.default(0),
          time: new _AnimatedValue2.default(0)
        };
      }
    }]);
    return SpringAnimation;
  }(_Animation3.default);

  exports.default = SpringAnimation;
});