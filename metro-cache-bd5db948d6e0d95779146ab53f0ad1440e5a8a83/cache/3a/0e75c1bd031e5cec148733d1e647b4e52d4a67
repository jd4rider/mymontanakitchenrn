__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _AnimatedNode2 = _require(_dependencyMap[0]);

  var _AnimatedNode3 = babelHelpers.interopRequireDefault(_AnimatedNode2);

  var _base = _require(_dependencyMap[1]);

  var _utils = _require(_dependencyMap[2]);

  var _evaluateOnce = _require(_dependencyMap[3]);

  var _interpolate2 = _require(_dependencyMap[4]);

  var _interpolate3 = babelHelpers.interopRequireDefault(_interpolate2);

  function sanitizeValue(value) {
    return value === null || value === undefined || typeof value === 'string' ? value : Number(value);
  }

  var AnimatedValue = function (_AnimatedNode) {
    babelHelpers.inherits(AnimatedValue, _AnimatedNode);

    function AnimatedValue(value) {
      babelHelpers.classCallCheck(this, AnimatedValue);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedValue.__proto__ || Object.getPrototypeOf(AnimatedValue)).call(this, {
        type: 'value',
        value: sanitizeValue(value)
      }));

      _this._startingValue = _this._value = value;
      _this._animation = null;
      return _this;
    }

    babelHelpers.createClass(AnimatedValue, [{
      key: "__detach",
      value: function __detach() {
        this.__detachAnimation(this._animation);

        babelHelpers.get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), "__detach", this).call(this);
      }
    }, {
      key: "__detachAnimation",
      value: function __detachAnimation(animation) {
        animation && animation.__detach();

        if (this._animation === animation) {
          this._animation = null;
        }
      }
    }, {
      key: "__attachAnimation",
      value: function __attachAnimation(animation) {
        this.__detachAnimation(this._animation);

        this._animation = animation;
      }
    }, {
      key: "__onEvaluate",
      value: function __onEvaluate() {
        if (this.__inputNodes && this.__inputNodes.length) {
          this.__inputNodes.forEach(_utils.val);
        }

        return this._value + this._offset;
      }
    }, {
      key: "_updateValue",
      value: function _updateValue(value) {
        this._value = value;

        this.__forceUpdateCache(value);
      }
    }, {
      key: "setValue",
      value: function setValue(value) {
        this.__detachAnimation(this._animation);

        (0, _evaluateOnce.evaluateOnce)((0, _base.set)(this, value), this);
      }
    }, {
      key: "interpolate",
      value: function interpolate(config) {
        return (0, _interpolate3.default)(this, config);
      }
    }]);
    return AnimatedValue;
  }(_AnimatedNode3.default);

  exports.default = AnimatedValue;
});