__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.extractFont = extractFont;

    exports.default = function (props, container) {
        var x = props.x,
            y = props.y,
            dx = props.dx,
            dy = props.dy,
            alignmentBaseline = props.alignmentBaseline,
            baselineShift = props.baselineShift,
            verticalAlign = props.verticalAlign;
        var rotate = props.rotate,
            children = props.children;
        var positionX = (0, _extractLengthList2.default)(x);
        var positionY = (0, _extractLengthList2.default)(y);
        var deltaX = (0, _extractLengthList2.default)(dx);
        var deltaY = (0, _extractLengthList2.default)(dy);
        rotate = (0, _extractLengthList2.default)(rotate);
        var content = null;

        if (typeof children === 'string' || typeof children === 'number') {
            var childrenString = children.toString();

            if (container) {
                children = _react2.default.createElement(
                    _TSpan2.default,
                    null,
                    childrenString
                );
            } else {
                content = childrenString;
                children = null;
            }
        } else if (_react.Children.count(children) > 1 || Array.isArray(children)) {
            children = _react.Children.map(children, function (child) {
                if (typeof child === 'string' || typeof child === 'number') {
                    return _react2.default.createElement(
                        _TSpan2.default,
                        null,
                        child.toString()
                    );
                } else {
                    return child;
                }
            });
        }

        var font = extractFont(props);
        return {
            font: font,
            children: children,
            content: content,
            positionX: positionX,
            positionY: positionY,
            rotate: rotate,
            deltaX: deltaX,
            deltaY: deltaY,
            alignmentBaseline: alignmentBaseline,
            baselineShift: baselineShift,
            verticalAlign: verticalAlign
        };
    };

    var _lodash = _require(_dependencyMap[0]);

    var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

    var _react = _require(_dependencyMap[1]);

    var _react2 = babelHelpers.interopRequireDefault(_react);

    var _TSpan = _require(_dependencyMap[2]);

    var _TSpan2 = babelHelpers.interopRequireDefault(_TSpan);

    var _extractLengthList = _require(_dependencyMap[3]);

    var _extractLengthList2 = babelHelpers.interopRequireDefault(_extractLengthList);

    var fontRegExp = /^\s*((?:(?:normal|bold|italic)\s+)*)(?:(\d+(?:\.\d+)?[ptexm%])*(?:\s*\/.*?)?\s+)?\s*"?([^"]*)/i;
    var fontFamilyPrefix = /^[\s"']*/;
    var fontFamilySuffix = /[\s"']*$/;
    var commaReg = /\s*,\s*/g;
    var cachedFontObjectsFromString = {};

    function extractSingleFontFamily(fontFamilyString) {
        return fontFamilyString ? fontFamilyString.split(commaReg)[0].replace(fontFamilyPrefix, '').replace(fontFamilySuffix, '') : null;
    }

    function parseFontString(font) {
        if (cachedFontObjectsFromString.hasOwnProperty(font)) {
            return cachedFontObjectsFromString[font];
        }

        var match = fontRegExp.exec(font);

        if (!match) {
            return null;
        }

        var fontFamily = extractSingleFontFamily(match[3]);
        var fontSize = match[2] || '12';
        var isBold = /bold/.exec(match[1]);
        var isItalic = /italic/.exec(match[1]);
        var fontWeight = isBold ? 'bold' : 'normal';
        var fontStyle = isItalic ? 'italic' : 'normal';
        cachedFontObjectsFromString[font] = {
            fontSize: fontSize,
            fontFamily: fontFamily,
            fontWeight: fontWeight,
            fontStyle: fontStyle
        };
        return cachedFontObjectsFromString[font];
    }

    function extractFont(props) {
        var fontData = props.fontData,
            fontStyle = props.fontStyle,
            fontVariant = props.fontVariant,
            fontWeight = props.fontWeight,
            fontStretch = props.fontStretch,
            textAnchor = props.textAnchor,
            textDecoration = props.textDecoration,
            letterSpacing = props.letterSpacing,
            wordSpacing = props.wordSpacing,
            kerning = props.kerning,
            fontVariantLigatures = props.fontVariantLigatures,
            fontFeatureSettings = props.fontFeatureSettings;
        var fontSize = props.fontSize,
            fontFamily = props.fontFamily,
            font = props.font;
        fontFamily = extractSingleFontFamily(fontFamily);
        fontSize = fontSize ? '' + fontSize : null;

        var ownedFont = _lodash2.default.pickBy({
            fontData: fontData,
            fontStyle: fontStyle,
            fontVariant: fontVariant,
            fontWeight: fontWeight,
            fontStretch: fontStretch,
            fontSize: fontSize,
            fontFamily: fontFamily,
            textAnchor: textAnchor,
            textDecoration: textDecoration,
            letterSpacing: letterSpacing,
            wordSpacing: wordSpacing,
            kerning: kerning,
            fontVariantLigatures: fontVariantLigatures,
            fontFeatureSettings: fontFeatureSettings
        }, function (prop) {
            return !_lodash2.default.isNil(prop);
        });

        if (typeof font === 'string') {
            font = parseFontString(font);
        }

        return _lodash2.default.defaults(ownedFont, font);
    }
});