__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _expo = _require(_dependencyMap[2]);

  var _AppNavigator = _require(_dependencyMap[3]);

  var _AppNavigator2 = babelHelpers.interopRequireDefault(_AppNavigator);

  var _reactNativeFetch = _require(_dependencyMap[4]);

  var _reactNativeFetch2 = babelHelpers.interopRequireDefault(_reactNativeFetch);

  var App = function (_React$Component) {
    babelHelpers.inherits(App, _React$Component);

    function App() {
      var _ref,
          _this2 = this;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, App);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = App.__proto__ || Object.getPrototypeOf(App)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        isLoadingComplete: false
      }, _this.componenDidMount = function () {
        fetch('https://mymontanakitchen.com/wp-json/wp/v2/posts').then(function (response) {
          console.log(response.json());
        });
      }, _this._loadResourcesAsync = function _callee() {
        return regeneratorRuntime.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", Promise.all([_expo.Asset.loadAsync([_require(_dependencyMap[5]), _require(_dependencyMap[6])]), _expo.Font.loadAsync(babelHelpers.extends({}, _expo.Icon.Ionicons.font, {
                  'space-mono': _require(_dependencyMap[7])
                }))]));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, null, _this2);
      }, _this._handleLoadingError = function (error) {
        console.warn(error);
      }, _this._handleFinishLoading = function () {
        _this.setState({
          isLoadingComplete: true
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(App, [{
      key: "render",
      value: function render() {
        if (!this.state.isLoadingComplete && !this.props.skipLoadingScreen) {
          return _react2.default.createElement(_expo.AppLoading, {
            startAsync: this._loadResourcesAsync,
            onError: this._handleLoadingError,
            onFinish: this._handleFinishLoading
          });
        } else {
          return _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.container
            },
            false,
            _react2.default.createElement(_AppNavigator2.default, null)
          );
        }
      }
    }]);
    return App;
  }(_react2.default.Component);

  exports.default = App;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#fff'
    }
  });
});