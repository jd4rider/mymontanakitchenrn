__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Constants = exports.default = undefined;

  var _class, _temp;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _lodash = _require(_dependencyMap[2]);

  var _lodash2 = babelHelpers.interopRequireDefault(_lodash);

  var _expoCore = _require(_dependencyMap[3]);

  var _reactNative = _require(_dependencyMap[4]);

  var ExpoBarCodeScannerModule = _expoCore.NativeModulesProxy.ExpoBarCodeScannerModule;
  var EVENT_THROTTLE_MS = 500;
  var BarCodeScanner = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(BarCodeScanner, _React$Component);

    function BarCodeScanner(props) {
      babelHelpers.classCallCheck(this, BarCodeScanner);

      var _this = babelHelpers.possibleConstructorReturn(this, (BarCodeScanner.__proto__ || Object.getPrototypeOf(BarCodeScanner)).call(this, props));

      _this.setReference = function (ref) {
        if (ref) {
          _this.barCodeScannerRef = ref;
          _this.barCodeScannerHandle = (0, _reactNative.findNodeHandle)(ref);
        } else {
          _this.barCodeScannerRef = null;
          _this.barCodeScannerHandle = null;
        }
      };

      _this.onObjectDetected = function (callback) {
        return function (_ref) {
          var nativeEvent = _ref.nativeEvent;
          var type = nativeEvent.type;

          if (_this.lastEvents[type] && _this.lastEventsTimes[type] && JSON.stringify(nativeEvent) === _this.lastEvents[type] && new Date() - _this.lastEventsTimes[type] < EVENT_THROTTLE_MS) {
            return;
          }

          if (callback) {
            callback(nativeEvent);
            _this.lastEventsTimes[type] = new Date();
            _this.lastEvents[type] = JSON.stringify(nativeEvent);
          }
        };
      };

      _this.lastEvents = {};
      _this.lastEventsTimes = {};
      return _this;
    }

    babelHelpers.createClass(BarCodeScanner, [{
      key: "render",
      value: function render() {
        var nativeProps = this.convertNativeProps(this.props);
        var _props = this.props,
            onBarCodeScanned = _props.onBarCodeScanned,
            onBarCodeRead = _props.onBarCodeRead;
        return _react2.default.createElement(ExpoBarCodeScannerView, babelHelpers.extends({}, nativeProps, {
          ref: this.setReference,
          onBarCodeScanned: this.onObjectDetected(onBarCodeScanned || onBarCodeRead)
        }));
      }
    }, {
      key: "convertNativeProps",
      value: function convertNativeProps(props) {
        var newProps = (0, _lodash2.default)(props, this.convertProp);
        return newProps;
      }
    }, {
      key: "convertProp",
      value: function convertProp(value, key) {
        if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {
          return BarCodeScanner.ConversionTables[key][value];
        }

        return value;
      }
    }], [{
      key: "scanFromURLAsync",
      value: function scanFromURLAsync(url, barCodeTypes) {
        var effectiveBarCodeTypes;
        return regeneratorRuntime.async(function scanFromURLAsync$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(Array.isArray(barCodeTypes) && barCodeTypes.length === 0)) {
                  _context.next = 2;
                  break;
                }

                throw new Error('No barCodeTypes requested, provide at least one barCodeType for scanner');

              case 2:
                effectiveBarCodeTypes = barCodeTypes || Object.values(ExpoBarCodeScannerModule.BarCodeType);
                return _context.abrupt("return", ExpoBarCodeScannerModule.scanFromURLAsync(url, effectiveBarCodeTypes));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }]);
    return BarCodeScanner;
  }(_react2.default.Component), _class.Constants = {
    BarCodeType: ExpoBarCodeScannerModule.BarCodeType,
    Type: ExpoBarCodeScannerModule.Type
  }, _class.ConversionTables = {
    type: ExpoBarCodeScannerModule.Type
  }, _class.propTypes = babelHelpers.extends({}, _reactNative.ViewPropTypes, {
    onBarCodeScanned: _propTypes2.default.func,
    barCodeTypes: _propTypes2.default.array,
    type: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
  }), _class.defaultProps = {
    type: ExpoBarCodeScannerModule.Type.back,
    barCodeTypes: Object.values(ExpoBarCodeScannerModule.BarCodeType)
  }, _temp);
  exports.default = BarCodeScanner;
  var Constants = exports.Constants = BarCodeScanner.Constants;
  var ExpoBarCodeScannerView = (0, _expoCore.requireNativeViewManager)('ExpoBarCodeScannerView', BarCodeScanner);
});