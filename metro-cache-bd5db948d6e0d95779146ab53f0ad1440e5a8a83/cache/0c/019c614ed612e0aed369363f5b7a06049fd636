__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var _Text = _require(_dependencyMap[3]);

  var _Text2 = babelHelpers.interopRequireDefault(_Text);

  var _fonts = _require(_dependencyMap[4]);

  var _fonts2 = babelHelpers.interopRequireDefault(_fonts);

  var _colors = _require(_dependencyMap[5]);

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _FontAwesome = _require(_dependencyMap[6]);

  var _FontAwesome2 = babelHelpers.interopRequireDefault(_FontAwesome);

  var _getIconType = _require(_dependencyMap[7]);

  var _getIconType2 = babelHelpers.interopRequireDefault(_getIconType);

  var _ViewPropTypes = _require(_dependencyMap[8]);

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var CheckBox = function CheckBox(props) {
    var component = props.component,
        checked = props.checked,
        iconRight = props.iconRight,
        title = props.title,
        center = props.center,
        right = props.right,
        containerStyle = props.containerStyle,
        textStyle = props.textStyle,
        onPress = props.onPress,
        onLongPress = props.onLongPress,
        onIconPress = props.onIconPress,
        onLongIconPress = props.onLongIconPress,
        size = props.size,
        checkedIcon = props.checkedIcon,
        uncheckedIcon = props.uncheckedIcon,
        iconType = props.iconType,
        checkedColor = props.checkedColor,
        uncheckedColor = props.uncheckedColor,
        checkedTitle = props.checkedTitle,
        fontFamily = props.fontFamily,
        attributes = babelHelpers.objectWithoutProperties(props, ["component", "checked", "iconRight", "title", "center", "right", "containerStyle", "textStyle", "onPress", "onLongPress", "onIconPress", "onLongIconPress", "size", "checkedIcon", "uncheckedIcon", "iconType", "checkedColor", "uncheckedColor", "checkedTitle", "fontFamily"]);
    var Icon = _FontAwesome2.default;

    if (iconType) {
      Icon = (0, _getIconType2.default)(iconType);
    }

    var Component = component || _reactNative.TouchableOpacity;
    var iconName = uncheckedIcon;

    if (checked) {
      iconName = checkedIcon;
    }

    return _react2.default.createElement(
      Component,
      babelHelpers.extends({}, attributes, {
        onLongPress: onLongPress,
        onPress: onPress,
        style: [styles.container, containerStyle && containerStyle]
      }),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: [styles.wrapper, right && {
            justifyContent: 'flex-end'
          }, center && {
            justifyContent: 'center'
          }]
        },
        !iconRight && _react2.default.createElement(Icon, {
          color: checked ? checkedColor : uncheckedColor,
          name: iconName,
          size: size || 24,
          onLongPress: onLongIconPress,
          onPress: onIconPress
        }),
        _react2.default.isValidElement(title) ? title : _react2.default.createElement(
          _Text2.default,
          {
            style: [styles.text, textStyle && textStyle, fontFamily && {
              fontFamily: fontFamily
            }]
          },
          checked ? checkedTitle || title : title
        ),
        iconRight && _react2.default.createElement(Icon, {
          color: checked ? checkedColor : uncheckedColor,
          name: iconName,
          size: size || 24,
          onLongPress: onLongIconPress,
          onPress: onIconPress
        })
      )
    );
  };

  CheckBox.defaultProps = {
    checked: false,
    iconRight: false,
    right: false,
    center: false,
    checkedColor: 'green',
    uncheckedColor: '#bfbfbf',
    checkedIcon: 'check-square-o',
    uncheckedIcon: 'square-o',
    size: 24
  };
  CheckBox.propTypes = {
    component: _propTypes2.default.any,
    checked: _propTypes2.default.bool,
    iconRight: _propTypes2.default.bool,
    title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
    center: _propTypes2.default.bool,
    right: _propTypes2.default.bool,
    containerStyle: _ViewPropTypes2.default.style,
    textStyle: _reactNative.Text.propTypes.style,
    onPress: _propTypes2.default.func,
    onLongPress: _propTypes2.default.func,
    checkedIcon: _propTypes2.default.string,
    uncheckedIcon: _propTypes2.default.string,
    iconType: _propTypes2.default.string,
    size: _propTypes2.default.number,
    checkedColor: _propTypes2.default.string,
    uncheckedColor: _propTypes2.default.string,
    checkedTitle: _propTypes2.default.string,
    onIconPress: _propTypes2.default.func,
    onLongIconPress: _propTypes2.default.func,
    fontFamily: _propTypes2.default.string
  };

  var styles = _reactNative.StyleSheet.create({
    wrapper: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    container: {
      margin: 5,
      marginLeft: 10,
      marginRight: 10,
      backgroundColor: '#fafafa',
      borderColor: '#ededed',
      borderWidth: 1,
      padding: 10,
      borderRadius: 3
    },
    text: babelHelpers.extends({
      marginLeft: 10,
      marginRight: 10,
      color: _colors2.default.grey1
    }, babelHelpers.extends({}, _fonts2.default.android.bold))
  });

  exports.default = CheckBox;
});