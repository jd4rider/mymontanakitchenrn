__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _propTypes = _require(_dependencyMap[0]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _react = _require(_dependencyMap[1]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[2]);

  var _colors = _require(_dependencyMap[3]);

  var _colors2 = babelHelpers.interopRequireDefault(_colors);

  var _normalizeText = _require(_dependencyMap[4]);

  var _normalizeText2 = babelHelpers.interopRequireDefault(_normalizeText);

  var _ViewPropTypes = _require(_dependencyMap[5]);

  var _ViewPropTypes2 = babelHelpers.interopRequireDefault(_ViewPropTypes);

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      width = _Dimensions$get.width;

  var FormInput = function (_Component) {
    babelHelpers.inherits(FormInput, _Component);

    function FormInput(props) {
      babelHelpers.classCallCheck(this, FormInput);

      var _this = babelHelpers.possibleConstructorReturn(this, (FormInput.__proto__ || Object.getPrototypeOf(FormInput)).call(this, props));

      _this.getRef = function () {
        return _this.input || _this.refs[_this.props.textInputRef];
      };

      _this.getRefHandler = function () {
        if (_this.props.textInputRef) {
          if (typeof _this.props.textInputRef === 'function') {
            return function (input) {
              _this.input = input;

              _this.props.textInputRef(input);
            };
          } else {
            return _this.props.textInputRef;
          }
        } else {
          return function (input) {
            return _this.input = input;
          };
        }
      };

      _this.shake = _this.shake.bind(_this);
      return _this;
    }

    babelHelpers.createClass(FormInput, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.shakeAnimationValue = new _reactNative.Animated.Value(0);
        this.props.shake && this.shake();
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        nextProps.shake && this.props.shake !== nextProps.shake && this.shake();
      }
    }, {
      key: "focus",
      value: function focus() {
        this.getRef() && this.getRef().focus();
      }
    }, {
      key: "blur",
      value: function blur() {
        this.getRef() && this.getRef().blur();
      }
    }, {
      key: "clearText",
      value: function clearText() {
        this.getRef() && this.getRef().clear();
      }
    }, {
      key: "shake",
      value: function shake() {
        var shakeAnimationValue = this.shakeAnimationValue;
        shakeAnimationValue.setValue(0);

        _reactNative.Animated.timing(shakeAnimationValue, {
          duration: 375,
          toValue: 3,
          ease: _reactNative.Easing.bounce
        }).start();
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            containerStyle = _props.containerStyle,
            inputStyle = _props.inputStyle,
            containerRef = _props.containerRef,
            normalizeFontSize = _props.normalizeFontSize,
            attributes = babelHelpers.objectWithoutProperties(_props, ["containerStyle", "inputStyle", "containerRef", "normalizeFontSize"]);
        var translateX = this.shakeAnimationValue.interpolate({
          inputRange: [0, 0.5, 1, 1.5, 2, 2.5, 3],
          outputRange: [0, -15, 0, 15, 0, -15, 0]
        });
        return _react2.default.createElement(
          _reactNative.Animated.View,
          {
            ref: containerRef,
            style: [styles.container, containerStyle && containerStyle, {
              transform: [{
                translateX: translateX
              }]
            }]
          },
          _react2.default.createElement(_reactNative.TextInput, babelHelpers.extends({}, attributes, {
            ref: this.getRefHandler(),
            style: [styles.input, {
              fontSize: normalizeFontSize ? (0, _normalizeText2.default)(14) : 14
            }, inputStyle && inputStyle]
          }))
        );
      }
    }]);
    return FormInput;
  }(_react.Component);

  FormInput.propTypes = {
    containerStyle: _ViewPropTypes2.default.style,
    inputStyle: _reactNative.Text.propTypes.style,
    textInputRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
    containerRef: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
    normalizeFontSize: _propTypes2.default.bool,
    shake: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool, _propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])
  };
  FormInput.defaultProps = {
    normalizeFontSize: true
  };

  var styles = _reactNative.StyleSheet.create({
    container: babelHelpers.extends({
      marginLeft: 15,
      marginRight: 15
    }, {
      borderBottomColor: _colors2.default.grey4,
      borderBottomWidth: 1,
      marginLeft: 20,
      marginRight: 20
    }),
    input: babelHelpers.extends({}, {
      minHeight: 36,
      width: width
    }, {
      color: _colors2.default.grey3
    })
  });

  exports.default = FormInput;
});