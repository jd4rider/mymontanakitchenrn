__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _this = this;

  var _reactNative = _require(_dependencyMap[0]);

  var ExponentLocalization = _reactNative.NativeModules.ExponentLocalization;

  var isObject = function isObject(obj) {
    return obj && obj.constructor && obj.constructor === Object;
  };

  var LocaleStore = function LocaleStore(locales) {
    babelHelpers.classCallCheck(this, LocaleStore);

    if (isObject(locales) === false || Object.keys(locales).length <= 1) {
      throw new Error('Locales input must be an object and non-empty');
    }

    var copy = babelHelpers.extends({}, locales);
    var allGivenLocales = new Set(Object.keys(copy));
    var currentLocaleName = [].concat(babelHelpers.toConsumableArray(allGivenLocales))[0];
    var defaultLocale = copy[currentLocaleName];
    var defaultLocaleName = currentLocaleName;
    var defaultLocalePhrases = new Set(Object.keys(defaultLocale));
    var currentLocale = defaultLocale;

    var setLocaleHelper = function setLocaleHelper(newLocaleName, cb) {
      if (allGivenLocales.has(newLocaleName) === false) {}

      if (newLocaleName === currentLocaleName) {
        return;
      }

      currentLocale = copy[newLocaleName];
      currentLocaleName = newLocaleName;
      cb && cb();
    };

    var localizationValueHelper = function localizationValueHelper(name) {
      if (defaultLocalePhrases.has(name)) {
        var result = currentLocale[name];

        if (result !== undefined) {
          return result !== undefined ? result : defaultLocale[name];
        } else {
          var fallback = defaultLocale[name];

          if (fallback === undefined) {
            return '';
          }

          return fallback;
        }
      }
    };

    {
      var handlers = {
        setLocale: setLocaleHelper
      };
      var methods = new Set(Object.keys(handlers));
      return new Proxy(this, {
        set: function set(target, name, value) {},
        get: function get(target, name) {
          if (typeof name !== 'string') {
            return target[name];
          } else {
            if (defaultLocalePhrases.has(name)) {
              return localizationValueHelper(name);
            } else if (methods.has(name)) {
              return handlers[name];
            } else {
              return target[name];
            }
          }
        }
      });
    }
  };

  var getCurrentLocaleAsync = function getCurrentLocaleAsync() {
    return regeneratorRuntime.async(function getCurrentLocaleAsync$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return regeneratorRuntime.awrap(ExponentLocalization.getCurrentLocaleAsync());

          case 2:
            return _context.abrupt("return", _context.sent.replace('-', '_'));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, _this);
  };

  exports.default = babelHelpers.extends({}, ExponentLocalization, {
    getCurrentLocaleAsync: getCurrentLocaleAsync,
    LocaleStore: LocaleStore
  });
});