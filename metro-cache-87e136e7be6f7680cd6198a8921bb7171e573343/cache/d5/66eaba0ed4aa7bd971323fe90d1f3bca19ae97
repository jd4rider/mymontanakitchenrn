__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _TouchableItem = _require(_dependencyMap[2]);

  var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

  var _backIcon = _require(_dependencyMap[3]);

  var _backIcon2 = babelHelpers.interopRequireDefault(_backIcon);

  var HeaderBackButton = (_temp2 = _class = function (_React$PureComponent) {
    babelHelpers.inherits(HeaderBackButton, _React$PureComponent);

    function HeaderBackButton() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, HeaderBackButton);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = HeaderBackButton.__proto__ || Object.getPrototypeOf(HeaderBackButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this._onTextLayout = function (e) {
        if (_this.state.initialTextWidth) {
          return;
        }

        _this.setState({
          initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(HeaderBackButton, [{
      key: "_renderBackImage",
      value: function _renderBackImage() {
        var _props = this.props,
            backImage = _props.backImage,
            title = _props.title,
            tintColor = _props.tintColor;
        var BackImage = void 0;
        var props = void 0;

        if (_react2.default.isValidElement(backImage)) {
          return backImage;
        } else if (backImage) {
          BackImage = backImage;
          props = {
            tintColor: tintColor,
            title: title
          };
        } else {
          BackImage = _reactNative.Image;
          props = {
            style: [styles.icon, !!title && styles.iconWithTitle, !!tintColor && {
              tintColor: tintColor
            }],
            source: _backIcon2.default
          };
        }

        return _react2.default.createElement(BackImage, props);
      }
    }, {
      key: "_maybeRenderTitle",
      value: function _maybeRenderTitle() {
        var _props2 = this.props,
            layoutPreset = _props2.layoutPreset,
            backTitleVisible = _props2.backTitleVisible,
            width = _props2.width,
            title = _props2.title,
            titleStyle = _props2.titleStyle,
            tintColor = _props2.tintColor,
            truncatedTitle = _props2.truncatedTitle;
        var renderTruncated = this.state.initialTextWidth && width ? this.state.initialTextWidth > width : false;
        var backButtonTitle = renderTruncated ? truncatedTitle : title;
        var titleDefaultsToDisabled = layoutPreset === 'left' || true || typeof backButtonTitle !== 'string';

        if (titleDefaultsToDisabled && !backTitleVisible) {
          return null;
        }

        return _react2.default.createElement(
          _reactNative.Text,
          {
            accessible: false,
            onLayout: this._onTextLayout,
            style: [styles.title, !!tintColor && {
              color: tintColor
            }, titleStyle],
            numberOfLines: 1
          },
          backButtonTitle
        );
      }
    }, {
      key: "render",
      value: function render() {
        var _props3 = this.props,
            onPress = _props3.onPress,
            pressColorAndroid = _props3.pressColorAndroid,
            title = _props3.title;

        var button = _react2.default.createElement(
          _TouchableItem2.default,
          {
            accessible: true,
            accessibilityComponentType: "button",
            accessibilityLabel: title,
            accessibilityTraits: "button",
            testID: "header-back",
            delayPressIn: 0,
            onPress: onPress,
            pressColor: pressColorAndroid,
            style: styles.container,
            borderless: true
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.container
            },
            this._renderBackImage(),
            this._maybeRenderTitle()
          )
        );

        {
          return _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.androidButtonWrapper
            },
            button
          );
        }
      }
    }]);
    return HeaderBackButton;
  }(_react2.default.PureComponent), _class.defaultProps = {
    pressColorAndroid: 'rgba(0, 0, 0, .32)',
    tintColor: undefined,
    truncatedTitle: 'Back'
  }, _temp2);

  var styles = _reactNative.StyleSheet.create({
    androidButtonWrapper: {
      margin: 13,
      backgroundColor: 'transparent'
    },
    container: {
      alignItems: 'center',
      flexDirection: 'row',
      backgroundColor: 'transparent'
    },
    title: {
      fontSize: 17,
      paddingRight: 10
    },
    icon: {
      height: 24,
      width: 24,
      margin: 3,
      resizeMode: 'contain',
      transform: [{
        scaleX: _reactNative.I18nManager.isRTL ? -1 : 1
      }]
    },
    iconWithTitle: {}
  });

  exports.default = HeaderBackButton;
});