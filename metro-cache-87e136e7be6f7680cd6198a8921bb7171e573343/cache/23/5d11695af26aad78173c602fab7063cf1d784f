__d(function (global, _require, module, exports, _dependencyMap) {
  var _reactNative = _require(_dependencyMap[0]);

  var EventEmitter = function () {
    function EventEmitter(nativeModule) {
      babelHelpers.classCallCheck(this, EventEmitter);
      this._listenersCount = 0;
      this._nativeModule = nativeModule;
      this._eventEmitter = new _reactNative.NativeEventEmitter(nativeModule);
    }

    babelHelpers.createClass(EventEmitter, [{
      key: "addListener",
      value: function addListener(eventName, listener) {
        this._listenersCount += 1;
        return this._eventEmitter.addListener(eventName, listener);
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(eventName) {
        var listenersToRemoveCount = this._eventEmitter.listeners(eventName).length;

        var newListenersCount = Math.max(0, this._listenersCount - listenersToRemoveCount);

        this._eventEmitter.removeAllListeners(eventName);

        this._listenersCount = newListenersCount;
      }
    }, {
      key: "removeSubscription",
      value: function removeSubscription(subscription) {
        this._listenersCount -= 1;

        this._eventEmitter.removeSubscription(subscription);
      }
    }, {
      key: "emit",
      value: function emit(eventType) {
        var _eventEmitter;

        for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          params[_key - 1] = arguments[_key];
        }

        (_eventEmitter = this._eventEmitter).emit.apply(_eventEmitter, [eventType].concat(params));
      }
    }]);
    return EventEmitter;
  }();

  module.exports = EventEmitter;
});