__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _expo = _require(_dependencyMap[2]);

  var ExpoConfigView = function (_React$Component) {
    babelHelpers.inherits(ExpoConfigView, _React$Component);

    function ExpoConfigView() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, ExpoConfigView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ExpoConfigView.__proto__ || Object.getPrototypeOf(ExpoConfigView)).call.apply(_ref, [this].concat(args))), _this), _this._renderSectionHeader = function (_ref2) {
        var section = _ref2.section;
        return _react2.default.createElement(SectionHeader, {
          title: section.title
        });
      }, _this._renderItem = function (_ref3) {
        var item = _ref3.item;

        if (item.type === 'color') {
          return _react2.default.createElement(
            SectionContent,
            null,
            item.value && _react2.default.createElement(Color, {
              value: item.value
            })
          );
        } else {
          return _react2.default.createElement(
            SectionContent,
            null,
            _react2.default.createElement(
              _reactNative.Text,
              {
                style: styles.sectionContentText
              },
              item.value
            )
          );
        }
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(ExpoConfigView, [{
      key: "render",
      value: function render() {
        var manifest = _expo.Constants.manifest;
        var sections = [{
          data: [{
            value: manifest.sdkVersion
          }],
          title: 'sdkVersion'
        }, {
          data: [{
            value: manifest.privacy
          }],
          title: 'privacy'
        }, {
          data: [{
            value: manifest.version
          }],
          title: 'version'
        }, {
          data: [{
            value: manifest.orientation
          }],
          title: 'orientation'
        }, {
          data: [{
            value: manifest.primaryColor,
            type: 'color'
          }],
          title: 'primaryColor'
        }, {
          data: [{
            value: manifest.splash && manifest.splash.image
          }],
          title: 'splash.image'
        }, {
          data: [{
            value: manifest.splash && manifest.splash.backgroundColor,
            type: 'color'
          }],
          title: 'splash.backgroundColor'
        }, {
          data: [{
            value: manifest.splash && manifest.splash.resizeMode
          }],
          title: 'splash.resizeMode'
        }, {
          data: [{
            value: manifest.ios && manifest.ios.supportsTablet ? 'true' : 'false'
          }],
          title: 'ios.supportsTablet'
        }];
        return _react2.default.createElement(_reactNative.SectionList, {
          style: styles.container,
          renderItem: this._renderItem,
          renderSectionHeader: this._renderSectionHeader,
          stickySectionHeadersEnabled: true,
          keyExtractor: function keyExtractor(item, index) {
            return index;
          },
          ListHeaderComponent: ListHeader,
          sections: sections
        });
      }
    }]);
    return ExpoConfigView;
  }(_react2.default.Component);

  exports.default = ExpoConfigView;

  var ListHeader = function ListHeader() {
    var manifest = _expo.Constants.manifest;
    return _react2.default.createElement(
      _reactNative.View,
      {
        style: styles.titleContainer
      },
      _react2.default.createElement(
        _reactNative.View,
        {
          style: styles.titleIconContainer
        },
        _react2.default.createElement(AppIconPreview, {
          iconUrl: manifest.iconUrl
        })
      ),
      _react2.default.createElement(
        _reactNative.View,
        {
          style: styles.titleTextContainer
        },
        _react2.default.createElement(
          _reactNative.Text,
          {
            style: styles.nameText,
            numberOfLines: 1
          },
          manifest.name
        ),
        _react2.default.createElement(
          _reactNative.Text,
          {
            style: styles.slugText,
            numberOfLines: 1
          },
          manifest.slug
        ),
        _react2.default.createElement(
          _reactNative.Text,
          {
            style: styles.descriptionText
          },
          manifest.description
        )
      )
    );
  };

  var SectionHeader = function SectionHeader(_ref4) {
    var title = _ref4.title;
    return _react2.default.createElement(
      _reactNative.View,
      {
        style: styles.sectionHeaderContainer
      },
      _react2.default.createElement(
        _reactNative.Text,
        {
          style: styles.sectionHeaderText
        },
        title
      )
    );
  };

  var SectionContent = function SectionContent(props) {
    return _react2.default.createElement(
      _reactNative.View,
      {
        style: styles.sectionContentContainer
      },
      props.children
    );
  };

  var AppIconPreview = function AppIconPreview(_ref5) {
    var iconUrl = _ref5.iconUrl;

    if (!iconUrl) {
      iconUrl = 'https://s3.amazonaws.com/exp-brand-assets/ExponentEmptyManifest_192.png';
    }

    return _react2.default.createElement(_reactNative.Image, {
      source: {
        uri: iconUrl
      },
      style: {
        width: 64,
        height: 64
      },
      resizeMode: "cover"
    });
  };

  var Color = function Color(_ref6) {
    var value = _ref6.value;

    if (!value) {
      return _react2.default.createElement(_reactNative.View, null);
    } else {
      return _react2.default.createElement(
        _reactNative.View,
        {
          style: styles.colorContainer
        },
        _react2.default.createElement(_reactNative.View, {
          style: [styles.colorPreview, {
            backgroundColor: value
          }]
        }),
        _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.colorTextContainer
          },
          _react2.default.createElement(
            _reactNative.Text,
            {
              style: styles.sectionContentText
            },
            value
          )
        )
      );
    }
  };

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#fff'
    },
    titleContainer: {
      paddingHorizontal: 15,
      paddingTop: 15,
      paddingBottom: 15,
      flexDirection: 'row'
    },
    titleIconContainer: {
      marginRight: 15,
      paddingTop: 2
    },
    sectionHeaderContainer: {
      backgroundColor: '#fbfbfb',
      paddingVertical: 8,
      paddingHorizontal: 15,
      borderWidth: _reactNative.StyleSheet.hairlineWidth,
      borderColor: '#ededed'
    },
    sectionHeaderText: {
      fontSize: 14
    },
    sectionContentContainer: {
      paddingTop: 8,
      paddingBottom: 12,
      paddingHorizontal: 15
    },
    sectionContentText: {
      color: '#808080',
      fontSize: 14
    },
    nameText: {
      fontWeight: '600',
      fontSize: 18
    },
    slugText: {
      color: '#a39f9f',
      fontSize: 14,
      backgroundColor: 'transparent'
    },
    descriptionText: {
      fontSize: 14,
      marginTop: 6,
      color: '#4d4d4d'
    },
    colorContainer: {
      flexDirection: 'row',
      alignItems: 'center'
    },
    colorPreview: {
      width: 17,
      height: 17,
      borderRadius: 2,
      marginRight: 6,
      borderWidth: _reactNative.StyleSheet.hairlineWidth,
      borderColor: '#ccc'
    },
    colorTextContainer: {
      flex: 1
    }
  });
});