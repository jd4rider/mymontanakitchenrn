__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _expo = _require(_dependencyMap[2]);

  var _vectorIcons = _require(_dependencyMap[3]);

  var _reactNativePlatformTouchable = _require(_dependencyMap[4]);

  var _reactNativePlatformTouchable2 = babelHelpers.interopRequireDefault(_reactNativePlatformTouchable);

  var ExpoLinksScreen = function (_React$Component) {
    babelHelpers.inherits(ExpoLinksScreen, _React$Component);

    function ExpoLinksScreen() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, ExpoLinksScreen);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ExpoLinksScreen.__proto__ || Object.getPrototypeOf(ExpoLinksScreen)).call.apply(_ref, [this].concat(args))), _this), _this._handlePressSlack = function () {
        _expo.WebBrowser.openBrowserAsync('https://slack.expo.io');
      }, _this._handlePressDocs = function () {
        _expo.WebBrowser.openBrowserAsync('http://docs.expo.io');
      }, _this._handlePressForums = function () {
        _expo.WebBrowser.openBrowserAsync('http://forums.expo.io');
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(ExpoLinksScreen, [{
      key: "render",
      value: function render() {
        return _react2.default.createElement(
          _reactNative.View,
          null,
          _react2.default.createElement(
            _reactNative.Text,
            {
              style: styles.optionsTitleText
            },
            "Resources"
          ),
          _react2.default.createElement(
            _reactNativePlatformTouchable2.default,
            {
              style: styles.option,
              background: _reactNativePlatformTouchable2.default.Ripple('#ccc', false),
              onPress: this._handlePressDocs
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: {
                  flexDirection: 'row'
                }
              },
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: styles.optionIconContainer
                },
                _react2.default.createElement(_reactNative.Image, {
                  source: _require(_dependencyMap[5]),
                  resizeMode: "contain",
                  fadeDuration: 0,
                  style: {
                    width: 20,
                    height: 20,
                    marginTop: 1
                  }
                })
              ),
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: styles.optionTextContainer
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.optionText
                  },
                  "Read the Expo documentation"
                )
              )
            )
          ),
          _react2.default.createElement(
            _reactNativePlatformTouchable2.default,
            {
              background: _reactNativePlatformTouchable2.default.Ripple('#ccc', false),
              style: styles.option,
              onPress: this._handlePressSlack
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: {
                  flexDirection: 'row'
                }
              },
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: styles.optionIconContainer
                },
                _react2.default.createElement(_reactNative.Image, {
                  source: _require(_dependencyMap[6]),
                  fadeDuration: 0,
                  style: {
                    width: 20,
                    height: 20
                  }
                })
              ),
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: styles.optionTextContainer
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.optionText
                  },
                  "Join us on Slack"
                )
              )
            )
          ),
          _react2.default.createElement(
            _reactNativePlatformTouchable2.default,
            {
              style: styles.option,
              background: _reactNativePlatformTouchable2.default.Ripple('#ccc', false),
              onPress: this._handlePressForums
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: {
                  flexDirection: 'row'
                }
              },
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: styles.optionIconContainer
                },
                _react2.default.createElement(_vectorIcons.Ionicons, {
                  name: "ios-chatboxes",
                  size: 22,
                  color: "#ccc"
                })
              ),
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: styles.optionTextContainer
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.optionText
                  },
                  "Ask a question on the Expo forums"
                )
              )
            )
          )
        );
      }
    }]);
    return ExpoLinksScreen;
  }(_react2.default.Component);

  exports.default = ExpoLinksScreen;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      paddingTop: 15
    },
    optionsTitleText: {
      fontSize: 16,
      marginLeft: 15,
      marginTop: 9,
      marginBottom: 12
    },
    optionIconContainer: {
      marginRight: 9
    },
    option: {
      backgroundColor: '#fdfdfd',
      paddingHorizontal: 15,
      paddingVertical: 15,
      borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
      borderBottomColor: '#EDEDED'
    },
    optionText: {
      fontSize: 15,
      marginTop: 1
    }
  });
});