__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createOrReusePropsNode = createOrReusePropsNode;

  var _reactNative = _require(_dependencyMap[0]);

  var _AnimatedNode2 = _require(_dependencyMap[1]);

  var _AnimatedNode3 = babelHelpers.interopRequireDefault(_AnimatedNode2);

  var _AnimatedEvent = _require(_dependencyMap[2]);

  var _AnimatedEvent2 = babelHelpers.interopRequireDefault(_AnimatedEvent);

  var _AnimatedStyle = _require(_dependencyMap[3]);

  var _AnimatedStyle2 = babelHelpers.interopRequireDefault(_AnimatedStyle);

  var _invariant = _require(_dependencyMap[4]);

  var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

  var _areEqual = _require(_dependencyMap[5]);

  var _areEqual2 = babelHelpers.interopRequireDefault(_areEqual);

  function sanitizeProps(inputProps) {
    var props = {};

    for (var key in inputProps) {
      var value = inputProps[key];

      if (value instanceof _AnimatedNode3.default && !(value instanceof _AnimatedEvent2.default)) {
        props[key] = value.__nodeID;
      }
    }

    return props;
  }

  function createOrReusePropsNode(props, callback, oldNode) {
    if (props.style) {
      props = babelHelpers.extends({}, props, {
        style: (0, _AnimatedStyle.createOrReuseStyleNode)(props.style, oldNode && oldNode._props.style)
      });
    }

    var config = sanitizeProps(props);

    if (oldNode && (0, _areEqual2.default)(config, oldNode._config)) {
      return oldNode;
    }

    return new AnimatedProps(props, config, callback);
  }

  var AnimatedProps = function (_AnimatedNode) {
    babelHelpers.inherits(AnimatedProps, _AnimatedNode);

    function AnimatedProps(props, config, callback) {
      babelHelpers.classCallCheck(this, AnimatedProps);

      var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedProps.__proto__ || Object.getPrototypeOf(AnimatedProps)).call(this, {
        type: 'props',
        props: config
      }, Object.values(props).filter(function (n) {
        return !(n instanceof _AnimatedEvent2.default);
      })));

      _this._config = config;
      _this._props = props;
      _this._callback = callback;

      _this.__attach();

      return _this;
    }

    babelHelpers.createClass(AnimatedProps, [{
      key: "__onEvaluate",
      value: function __onEvaluate() {
        var props = {};

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof _AnimatedNode3.default) {
            props[key] = value.__getValue();
          }
        }

        return props;
      }
    }, {
      key: "__detach",
      value: function __detach() {
        var nativeViewTag = (0, _reactNative.findNodeHandle)(this._animatedView);
        (0, _invariant2.default)(nativeViewTag != null, 'Unable to locate attached view in the native tree');

        this._disconnectAnimatedView(nativeViewTag);

        babelHelpers.get(AnimatedProps.prototype.__proto__ || Object.getPrototypeOf(AnimatedProps.prototype), "__detach", this).call(this);
      }
    }, {
      key: "update",
      value: function update() {
        this._callback();
      }
    }, {
      key: "setNativeView",
      value: function setNativeView(animatedView) {
        if (this._animatedView === animatedView) {
          return;
        }

        this._animatedView = animatedView;
        var nativeViewTag = (0, _reactNative.findNodeHandle)(this._animatedView);
        (0, _invariant2.default)(nativeViewTag != null, 'Unable to locate attached view in the native tree');

        this._connectAnimatedView(nativeViewTag);
      }
    }]);
    return AnimatedProps;
  }(_AnimatedNode3.default);
});