__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _tenaciousFetch = _require(_dependencyMap[2]);

  var _tenaciousFetch2 = babelHelpers.interopRequireDefault(_tenaciousFetch);

  var noop = function noop() {};

  var Fetch = (_temp2 = _class = function (_Component) {
    babelHelpers.inherits(Fetch, _Component);

    function Fetch() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, Fetch);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Fetch.__proto__ || Object.getPrototypeOf(Fetch)).call.apply(_ref, [this].concat(args))), _this), _this.componentDidMount = function () {
        if (fetch) {
          _this.handleReqeuest();
        } else {
          throw new Error('fetch API required to perform request');
        }
      }, _this.handleReqeuest = function () {
        var _this$props = _this.props,
            url = _this$props.url,
            onResponse = _this$props.onResponse,
            onError = _this$props.onError,
            propConfig = babelHelpers.objectWithoutProperties(_this$props, ["url", "onResponse", "onError"]);
        var defaultConfig = babelHelpers.extends({
          fetcher: fetch
        }, propConfig);
        return (0, _tenaciousFetch2.default)(url, defaultConfig).then(onResponse).catch(onError);
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(Fetch, [{
      key: "render",
      value: function render() {
        return null;
      }
    }]);
    return Fetch;
  }(_react.Component), _class.propTypes = {
    url: _propTypes2.default.string.isRequired,
    onResponse: _propTypes2.default.func,
    onError: _propTypes2.default.func,
    method: _propTypes2.default.oneOf(['GET', 'POST', 'PUT', 'DELETE', 'PATCH']),
    body: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]),
    headers: _propTypes2.default.object,
    credentials: _propTypes2.default.string,
    retries: _propTypes2.default.number,
    timeout: _propTypes2.default.number
  }, _class.defaultProps = {
    method: 'GET',
    onResponse: noop,
    onError: noop
  }, _temp2);
  exports.default = Fetch;
});