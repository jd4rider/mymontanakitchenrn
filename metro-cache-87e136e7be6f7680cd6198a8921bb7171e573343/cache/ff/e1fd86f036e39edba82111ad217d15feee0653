__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _class, _temp2;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _expo = _require(_dependencyMap[2]);

  var _StyledText = _require(_dependencyMap[3]);

  var HomeScreen = (_temp2 = _class = function (_React$Component) {
    babelHelpers.inherits(HomeScreen, _React$Component);

    function HomeScreen() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, HomeScreen);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = HomeScreen.__proto__ || Object.getPrototypeOf(HomeScreen)).call.apply(_ref, [this].concat(args))), _this), _this._handleLearnMorePress = function () {
        _expo.WebBrowser.openBrowserAsync('https://docs.expo.io/versions/latest/guides/development-mode');
      }, _this._handleHelpPress = function () {
        _expo.WebBrowser.openBrowserAsync('https://docs.expo.io/versions/latest/guides/up-and-running.html#can-t-see-your-changes');
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(HomeScreen, [{
      key: "render",
      value: function render() {
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container
          },
          _react2.default.createElement(
            _reactNative.ScrollView,
            {
              style: styles.container,
              contentContainerStyle: styles.contentContainer
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.welcomeContainer
              },
              _react2.default.createElement(_reactNative.Image, {
                source: _require(_dependencyMap[4]),
                style: styles.welcomeImage
              })
            ),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.getStartedContainer
              },
              this._maybeRenderDevelopmentModeWarning(),
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.getStartedText
                },
                "Get started by opening"
              ),
              _react2.default.createElement(
                _reactNative.View,
                {
                  style: [styles.codeHighlightContainer, styles.homeScreenFilename]
                },
                _react2.default.createElement(
                  _StyledText.MonoText,
                  {
                    style: styles.codeHighlightText
                  },
                  "screens/HomeScreen.js"
                )
              ),
              _react2.default.createElement(
                _reactNative.Text,
                {
                  style: styles.getStartedText
                },
                "Change this text and your app will automatically reload."
              )
            ),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.helpContainer
              },
              _react2.default.createElement(
                _reactNative.TouchableOpacity,
                {
                  onPress: this._handleHelpPress,
                  style: styles.helpLink
                },
                _react2.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.helpLinkText
                  },
                  "Help, it didn\u2019t automatically reload!"
                )
              )
            )
          ),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.tabBarInfoContainer
            },
            _react2.default.createElement(
              _reactNative.Text,
              {
                style: styles.tabBarInfoText
              },
              "This is a tab bar. You can edit it in:"
            ),
            _react2.default.createElement(
              _reactNative.View,
              {
                style: [styles.codeHighlightContainer, styles.navigationFilename]
              },
              _react2.default.createElement(
                _StyledText.MonoText,
                {
                  style: styles.codeHighlightText
                },
                "navigation/MainTabNavigator.js"
              )
            )
          )
        );
      }
    }, {
      key: "_maybeRenderDevelopmentModeWarning",
      value: function _maybeRenderDevelopmentModeWarning() {
        {
          return _react2.default.createElement(
            _reactNative.Text,
            {
              style: styles.developmentModeText
            },
            "You are not in development mode, your app will run at full speed."
          );
        }
      }
    }]);
    return HomeScreen;
  }(_react2.default.Component), _class.navigationOptions = {
    header: null
  }, _temp2);
  exports.default = HomeScreen;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#fff'
    },
    developmentModeText: {
      marginBottom: 20,
      color: 'rgba(0,0,0,0.4)',
      fontSize: 14,
      lineHeight: 19,
      textAlign: 'center'
    },
    contentContainer: {
      paddingTop: 30
    },
    welcomeContainer: {
      alignItems: 'center',
      marginTop: 10,
      marginBottom: 20
    },
    welcomeImage: {
      width: 200,
      height: 160,
      resizeMode: 'contain',
      marginTop: 3,
      marginLeft: -10
    },
    getStartedContainer: {
      alignItems: 'center',
      marginHorizontal: 50
    },
    homeScreenFilename: {
      marginVertical: 7
    },
    codeHighlightText: {
      color: 'rgba(96,100,109, 0.8)'
    },
    codeHighlightContainer: {
      backgroundColor: 'rgba(0,0,0,0.05)',
      borderRadius: 3,
      paddingHorizontal: 4
    },
    getStartedText: {
      fontSize: 17,
      color: 'rgba(96,100,109, 1)',
      lineHeight: 24,
      textAlign: 'center'
    },
    tabBarInfoContainer: babelHelpers.extends({
      position: 'absolute',
      bottom: 0,
      left: 0,
      right: 0
    }, {
      elevation: 20
    }, {
      alignItems: 'center',
      backgroundColor: '#fbfbfb',
      paddingVertical: 20
    }),
    tabBarInfoText: {
      fontSize: 17,
      color: 'rgba(96,100,109, 1)',
      textAlign: 'center'
    },
    navigationFilename: {
      marginTop: 5
    },
    helpContainer: {
      marginTop: 15,
      alignItems: 'center'
    },
    helpLink: {
      paddingVertical: 15
    },
    helpLinkText: {
      fontSize: 14,
      color: '#2e78b7'
    }
  });
});