__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _clamp = _require(_dependencyMap[1]);

  var _clamp2 = babelHelpers.interopRequireDefault(_clamp);

  var _reactNative = _require(_dependencyMap[2]);

  var _reactNavigation = _require(_dependencyMap[3]);

  var _reactNativeScreens = _require(_dependencyMap[4]);

  var _StackViewCard = _require(_dependencyMap[5]);

  var _StackViewCard2 = babelHelpers.interopRequireDefault(_StackViewCard);

  var _Header = _require(_dependencyMap[6]);

  var _Header2 = babelHelpers.interopRequireDefault(_Header);

  var _StackViewTransitionConfigs = _require(_dependencyMap[7]);

  var _StackViewTransitionConfigs2 = babelHelpers.interopRequireDefault(_StackViewTransitionConfigs);

  var _ReactNativeFeatures = _require(_dependencyMap[8]);

  var emptyFunction = function emptyFunction() {};

  var IPHONE_XS_HEIGHT = 812;
  var IPHONE_XR_HEIGHT = 896;

  var _Dimensions$get = _reactNative.Dimensions.get('window'),
      WINDOW_WIDTH = _Dimensions$get.width,
      WINDOW_HEIGHT = _Dimensions$get.height;

  var IS_IPHONE_X = false;

  var EaseInOut = _reactNative.Easing.inOut(_reactNative.Easing.ease);

  var HEADER_LAYOUT_PRESET_VALUES = ['center', 'left'];
  var HEADER_TRANSITION_PRESET_VALUES = ['uikit', 'fade-in-place'];
  var ANIMATION_DURATION = 500;
  var POSITION_THRESHOLD = 0.5;
  var RESPOND_THRESHOLD = 20;
  var GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 25;
  var GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;

  var animatedSubscribeValue = function animatedSubscribeValue(animatedValue) {
    if (!animatedValue.__isNative) {
      return;
    }

    if (Object.keys(animatedValue._listeners).length === 0) {
      animatedValue.addListener(emptyFunction);
    }
  };

  var getDefaultHeaderHeight = function getDefaultHeaderHeight(isLandscape) {
    {
      return 56;
    }
  };

  var StackViewLayout = function (_React$Component) {
    babelHelpers.inherits(StackViewLayout, _React$Component);

    function StackViewLayout(props) {
      babelHelpers.classCallCheck(this, StackViewLayout);

      var _this = babelHelpers.possibleConstructorReturn(this, (StackViewLayout.__proto__ || Object.getPrototypeOf(StackViewLayout)).call(this, props));

      _this._gestureStartValue = 0;
      _this._isResponding = false;
      _this._immediateIndex = null;
      _this._panResponder = _reactNative.PanResponder.create({
        onPanResponderTerminate: function onPanResponderTerminate() {
          var navigation = _this.props.transitionProps.navigation;
          var index = navigation.state.index;
          _this._isResponding = false;

          _this._reset(index, 0);

          _this.props.onGestureCanceled && _this.props.onGestureCanceled();
        },
        onPanResponderGrant: function onPanResponderGrant() {
          var _this$props$transitio = _this.props.transitionProps,
              navigation = _this$props$transitio.navigation,
              position = _this$props$transitio.position,
              scene = _this$props$transitio.scene;
          var index = navigation.state.index;

          if (index !== scene.index) {
            return false;
          }

          position.stopAnimation(function (value) {
            _this._isResponding = true;
            _this._gestureStartValue = value;
          });
          _this.props.onGestureBegin && _this.props.onGestureBegin();
        },
        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(event, gesture) {
          var _this$props = _this.props,
              _this$props$transitio2 = _this$props.transitionProps,
              navigation = _this$props$transitio2.navigation,
              layout = _this$props$transitio2.layout,
              scene = _this$props$transitio2.scene,
              mode = _this$props.mode;
          var index = navigation.state.index;
          var isVertical = mode === 'modal';
          var options = scene.descriptor.options;
          var gestureDirection = options.gestureDirection;
          var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : _reactNative.I18nManager.isRTL;

          if (index !== scene.index) {
            return false;
          }

          var immediateIndex = _this._immediateIndex == null ? index : _this._immediateIndex;
          var currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];
          var currentDragPosition = event.nativeEvent[isVertical ? 'pageY' : 'pageX'];
          var axisLength = isVertical ? layout.height.__getValue() : layout.width.__getValue();
          var axisHasBeenMeasured = !!axisLength;
          var screenEdgeDistance = gestureDirectionInverted ? axisLength - (currentDragPosition - currentDragDistance) : currentDragPosition - currentDragDistance;
          var _options$gestureRespo = options.gestureResponseDistance,
              userGestureResponseDistance = _options$gestureRespo === undefined ? {} : _options$gestureRespo;
          var gestureResponseDistance = isVertical ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;

          if (screenEdgeDistance > gestureResponseDistance) {
            return false;
          }

          var hasDraggedEnough = Math.abs(currentDragDistance) > RESPOND_THRESHOLD;
          var isOnFirstCard = immediateIndex === 0;
          var shouldSetResponder = hasDraggedEnough && axisHasBeenMeasured && !isOnFirstCard;
          return shouldSetResponder;
        },
        onPanResponderMove: function onPanResponderMove(event, gesture) {
          var _this$props2 = _this.props,
              _this$props2$transiti = _this$props2.transitionProps,
              navigation = _this$props2$transiti.navigation,
              position = _this$props2$transiti.position,
              layout = _this$props2$transiti.layout,
              scene = _this$props2$transiti.scene,
              mode = _this$props2.mode;
          var index = navigation.state.index;
          var isVertical = mode === 'modal';
          var options = scene.descriptor.options;
          var gestureDirection = options.gestureDirection;
          var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : _reactNative.I18nManager.isRTL;
          var startValue = _this._gestureStartValue;
          var axis = isVertical ? 'dy' : 'dx';
          var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();
          var currentValue = axis === 'dx' && gestureDirectionInverted ? startValue + gesture[axis] / axisDistance : startValue - gesture[axis] / axisDistance;
          var value = (0, _clamp2.default)(index - 1, currentValue, index);
          position.setValue(value);
        },
        onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
          return false;
        },
        onPanResponderRelease: function onPanResponderRelease(event, gesture) {
          var _this$props3 = _this.props,
              _this$props3$transiti = _this$props3.transitionProps,
              navigation = _this$props3$transiti.navigation,
              position = _this$props3$transiti.position,
              layout = _this$props3$transiti.layout,
              scene = _this$props3$transiti.scene,
              mode = _this$props3.mode;
          var index = navigation.state.index;
          var isVertical = mode === 'modal';
          var options = scene.descriptor.options;
          var gestureDirection = options.gestureDirection;
          var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : _reactNative.I18nManager.isRTL;

          if (!_this._isResponding) {
            return;
          }

          _this._isResponding = false;
          var immediateIndex = _this._immediateIndex == null ? index : _this._immediateIndex;
          var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();
          var movementDirection = gestureDirectionInverted ? -1 : 1;
          var movedDistance = movementDirection * gesture[isVertical ? 'dy' : 'dx'];
          var gestureVelocity = movementDirection * gesture[isVertical ? 'vy' : 'vx'];
          var defaultVelocity = axisDistance / ANIMATION_DURATION;
          var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);
          var resetDuration = gestureDirectionInverted ? (axisDistance - movedDistance) / velocity : movedDistance / velocity;
          var goBackDuration = gestureDirectionInverted ? movedDistance / velocity : (axisDistance - movedDistance) / velocity;
          position.stopAnimation(function (value) {
            if (gestureVelocity < -0.5) {
              _this.props.onGestureCanceled && _this.props.onGestureCanceled();

              _this._reset(immediateIndex, resetDuration);

              return;
            }

            if (gestureVelocity > 0.5) {
              _this.props.onGestureFinish && _this.props.onGestureFinish();

              _this._goBack(immediateIndex, goBackDuration);

              return;
            }

            if (value <= index - POSITION_THRESHOLD) {
              _this.props.onGestureFinish && _this.props.onGestureFinish();

              _this._goBack(immediateIndex, goBackDuration);
            } else {
              _this.props.onGestureCanceled && _this.props.onGestureCanceled();

              _this._reset(immediateIndex, resetDuration);
            }
          });
        }
      });

      _this._onFloatingHeaderLayout = function (e) {
        _this.setState({
          floatingHeaderHeight: e.nativeEvent.layout.height
        });
      };

      _this._getTransitionConfig = function () {
        var isModal = _this.props.mode === 'modal';
        return _StackViewTransitionConfigs2.default.getTransitionConfig(_this.props.transitionConfig, _this.props.transitionProps, _this.props.lastTransitionProps, isModal);
      };

      _this._renderCard = function (scene) {
        var _this$_getTransitionC = _this._getTransitionConfig(),
            screenInterpolator = _this$_getTransitionC.screenInterpolator;

        var style = screenInterpolator && screenInterpolator(babelHelpers.extends({}, _this.props.transitionProps, {
          scene: scene
        }));
        var options = scene.descriptor.options;
        var hasHeader = options.header !== null;

        var headerMode = _this._getHeaderMode();

        var paddingTop = 0;

        if (hasHeader && headerMode === 'float' && !options.headerTransparent) {
          paddingTop = _this.state.floatingHeaderHeight;
        }

        return _react2.default.createElement(
          _StackViewCard2.default,
          babelHelpers.extends({}, _this.props.transitionProps, {
            key: "card_" + scene.key,
            transparent: _this.props.transparentCard,
            style: [style, {
              paddingTop: paddingTop
            }, _this.props.cardStyle],
            scene: scene
          }),
          _this._renderInnerScene(scene)
        );
      };

      _this.state = {
        floatingHeaderHeight: getDefaultHeaderHeight(props.isLandscape)
      };
      return _this;
    }

    babelHelpers.createClass(StackViewLayout, [{
      key: "_renderHeader",
      value: function _renderHeader(scene, headerMode) {
        var options = scene.descriptor.options;
        var header = options.header;

        if (header === null && headerMode === 'screen') {
          return null;
        }

        if (_react2.default.isValidElement(header)) {
          return header;
        }

        var renderHeader = header || function (props) {
          return _react2.default.createElement(_Header2.default, props);
        };

        var _getTransitionConfig = this._getTransitionConfig(),
            headerLeftInterpolator = _getTransitionConfig.headerLeftInterpolator,
            headerTitleInterpolator = _getTransitionConfig.headerTitleInterpolator,
            headerRightInterpolator = _getTransitionConfig.headerRightInterpolator,
            headerBackgroundInterpolator = _getTransitionConfig.headerBackgroundInterpolator;

        var _props = this.props,
            transitionProps = _props.transitionProps,
            passProps = babelHelpers.objectWithoutProperties(_props, ["transitionProps"]);
        return _react2.default.createElement(
          _reactNavigation.NavigationProvider,
          {
            value: scene.descriptor.navigation
          },
          renderHeader(babelHelpers.extends({}, passProps, transitionProps, {
            scene: scene,
            mode: headerMode,
            transitionPreset: this._getHeaderTransitionPreset(),
            layoutPreset: this._getHeaderLayoutPreset(),
            backTitleVisible: this._getheaderBackTitleVisible(),
            leftInterpolator: headerLeftInterpolator,
            titleInterpolator: headerTitleInterpolator,
            rightInterpolator: headerRightInterpolator,
            backgroundInterpolator: headerBackgroundInterpolator
          }))
        );
      }
    }, {
      key: "_animatedSubscribe",
      value: function _animatedSubscribe(props) {
        animatedSubscribeValue(props.transitionProps.layout.width);
        animatedSubscribeValue(props.transitionProps.layout.height);
        animatedSubscribeValue(props.transitionProps.position);
      }
    }, {
      key: "_reset",
      value: function _reset(resetToIndex, duration) {
        {
          _reactNative.Animated.timing(this.props.transitionProps.position, {
            toValue: resetToIndex,
            duration: duration,
            easing: EaseInOut,
            useNativeDriver: this.props.transitionProps.position.__isNative
          }).start();
        }
      }
    }, {
      key: "_goBack",
      value: function _goBack(backFromIndex, duration) {
        var _this2 = this;

        var _props$transitionProp = this.props.transitionProps,
            navigation = _props$transitionProp.navigation,
            position = _props$transitionProp.position,
            scenes = _props$transitionProp.scenes;
        var toValue = Math.max(backFromIndex - 1, 0);
        this._immediateIndex = toValue;

        var onCompleteAnimation = function onCompleteAnimation() {
          _this2._immediateIndex = null;
          var backFromScene = scenes.find(function (s) {
            return s.index === toValue + 1;
          });

          if (!_this2._isResponding && backFromScene) {
            navigation.dispatch(_reactNavigation.NavigationActions.back({
              key: backFromScene.route.key,
              immediate: true
            }));
            navigation.dispatch(_reactNavigation.StackActions.completeTransition());
          }
        };

        {
          _reactNative.Animated.timing(position, {
            toValue: toValue,
            duration: duration,
            easing: EaseInOut,
            useNativeDriver: position.__isNative
          }).start(onCompleteAnimation);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var floatingHeader = null;

        var headerMode = this._getHeaderMode();

        if (headerMode === 'float') {
          var _scene = this.props.transitionProps.scene;
          floatingHeader = _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.floatingHeader,
              pointerEvents: "box-none",
              onLayout: this._onFloatingHeaderLayout
            },
            this._renderHeader(_scene, headerMode)
          );
        }

        var _props$transitionProp2 = this.props.transitionProps,
            scene = _props$transitionProp2.scene,
            scenes = _props$transitionProp2.scenes;
        var options = scene.descriptor.options;
        var gesturesEnabled = typeof options.gesturesEnabled === 'boolean' ? options.gesturesEnabled : false;
        var responder = !gesturesEnabled ? null : this._panResponder;
        var handlers = gesturesEnabled ? responder.panHandlers : {};
        var containerStyle = [styles.container, this._getTransitionConfig().containerStyle];
        return _react2.default.createElement(
          _reactNative.View,
          babelHelpers.extends({}, handlers, {
            style: containerStyle
          }),
          _react2.default.createElement(
            _reactNativeScreens.ScreenContainer,
            {
              style: styles.scenes
            },
            scenes.map(function (s) {
              return _this3._renderCard(s);
            })
          ),
          floatingHeader
        );
      }
    }, {
      key: "_getHeaderMode",
      value: function _getHeaderMode() {
        if (this.props.headerMode) {
          return this.props.headerMode;
        }

        {
          return 'screen';
        }
        return 'float';
      }
    }, {
      key: "_getHeaderLayoutPreset",
      value: function _getHeaderLayoutPreset() {
        var headerLayoutPreset = this.props.headerLayoutPreset;

        if (headerLayoutPreset) {
          if (HEADER_LAYOUT_PRESET_VALUES.includes(headerLayoutPreset)) {
            return headerLayoutPreset;
          }
        }

        {
          return 'left';
        }
      }
    }, {
      key: "_getHeaderTransitionPreset",
      value: function _getHeaderTransitionPreset() {
        {
          return 'fade-in-place';
        }
        var headerTransitionPreset = this.props.headerTransitionPreset;

        if (headerTransitionPreset) {
          if (HEADER_TRANSITION_PRESET_VALUES.includes(headerTransitionPreset)) {
            return headerTransitionPreset;
          }
        }

        return 'fade-in-place';
      }
    }, {
      key: "_getheaderBackTitleVisible",
      value: function _getheaderBackTitleVisible() {
        var headerBackTitleVisible = this.props.headerBackTitleVisible;
        return headerBackTitleVisible;
      }
    }, {
      key: "_renderInnerScene",
      value: function _renderInnerScene(scene) {
        var _scene$descriptor = scene.descriptor,
            navigation = _scene$descriptor.navigation,
            getComponent = _scene$descriptor.getComponent;
        var SceneComponent = getComponent();
        var screenProps = this.props.screenProps;

        var headerMode = this._getHeaderMode();

        if (headerMode === 'screen') {
          return _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.container
            },
            _react2.default.createElement(
              _reactNative.View,
              {
                style: styles.scenes
              },
              _react2.default.createElement(_reactNavigation.SceneView, {
                screenProps: screenProps,
                navigation: navigation,
                component: SceneComponent
              })
            ),
            this._renderHeader(scene, headerMode)
          );
        }

        return _react2.default.createElement(_reactNavigation.SceneView, {
          screenProps: screenProps,
          navigation: navigation,
          component: SceneComponent
        });
      }
    }]);
    return StackViewLayout;
  }(_react2.default.Component);

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      flexDirection: 'column-reverse',
      overflow: 'hidden'
    },
    scenes: {
      flex: 1
    },
    floatingHeader: {
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0
    }
  });

  exports.default = (0, _reactNavigation.withOrientation)(StackViewLayout);
});