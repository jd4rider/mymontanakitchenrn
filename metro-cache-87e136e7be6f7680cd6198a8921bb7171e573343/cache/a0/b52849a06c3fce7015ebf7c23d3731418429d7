__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Directions = exports.DrawerLayout = exports.Swipeable = exports.gestureHandlerRootHOC = exports.FlatList = exports.BorderlessButton = exports.RectButton = exports.BaseButton = exports.RawButton = exports.State = exports.RotationGestureHandler = exports.PinchGestureHandler = exports.PanGestureHandler = exports.LongPressGestureHandler = exports.FlingGestureHandler = exports.TapGestureHandler = exports.NativeViewGestureHandler = exports.WebView = exports.DrawerLayoutAndroid = exports.ViewPagerAndroid = exports.ToolbarAndroid = exports.TextInput = exports.Switch = exports.Slider = exports.ScrollView = undefined;

  var _stateToPropMappings, _class3, _temp4, _class4, _temp5, _class5, _temp6;

  var _react = _require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = _require(_dependencyMap[1]);

  var _Touchable = _require(_dependencyMap[2]);

  var _Touchable2 = babelHelpers.interopRequireDefault(_Touchable);

  var _areEqual = _require(_dependencyMap[3]);

  var _areEqual2 = babelHelpers.interopRequireDefault(_areEqual);

  var _propTypes = _require(_dependencyMap[4]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _gestureHandlerRootHOC = _require(_dependencyMap[5]);

  var _gestureHandlerRootHOC2 = babelHelpers.interopRequireDefault(_gestureHandlerRootHOC);

  var _Swipeable = _require(_dependencyMap[6]);

  var _Swipeable2 = babelHelpers.interopRequireDefault(_Swipeable);

  var _DrawerLayout = _require(_dependencyMap[7]);

  var _DrawerLayout2 = babelHelpers.interopRequireDefault(_DrawerLayout);

  var RNGestureHandlerModule = _reactNative.NativeModules.RNGestureHandlerModule;
  var UIManager = _reactNative.NativeModules.UIManager;
  var oldSetJSResponder = UIManager.setJSResponder,
      oldClearJSResponder = UIManager.clearJSResponder;

  UIManager.setJSResponder = function (tag, blockNativeResponder) {
    RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);
    oldSetJSResponder(tag, blockNativeResponder);
  };

  UIManager.clearJSResponder = function () {
    RNGestureHandlerModule.handleClearJSResponder();
    oldClearJSResponder();
  };

  UIManager.RCTView.directEventTypes = babelHelpers.extends({}, UIManager.RCTView.directEventTypes, {
    onGestureHandlerEvent: {
      registrationName: 'onGestureHandlerEvent'
    },
    onGestureHandlerStateChange: {
      registrationName: 'onGestureHandlerStateChange'
    }
  });
  var State = RNGestureHandlerModule.State;
  var Directions = RNGestureHandlerModule.Direction;
  var handlerTag = 1;
  var handlerIDToTag = {};
  var GestureHandlerPropTypes = {
    id: _propTypes2.default.string,
    minPointers: _propTypes2.default.number,
    enabled: _propTypes2.default.bool,
    waitFor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]))]),
    simultaneousHandlers: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]))]),
    shouldCancelWhenOutside: _propTypes2.default.bool,
    hitSlop: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({
      left: _propTypes2.default.number,
      top: _propTypes2.default.number,
      right: _propTypes2.default.number,
      bottom: _propTypes2.default.number,
      vertical: _propTypes2.default.number,
      horizontal: _propTypes2.default.number,
      width: _propTypes2.default.number,
      height: _propTypes2.default.number
    })]),
    onGestureEvent: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.object]),
    onHandlerStateChange: _propTypes2.default.func,
    onBegan: _propTypes2.default.func,
    onFailed: _propTypes2.default.func,
    onCancelled: _propTypes2.default.func,
    onActivated: _propTypes2.default.func,
    onEnded: _propTypes2.default.func
  };
  var stateToPropMappings = (_stateToPropMappings = {}, babelHelpers.defineProperty(_stateToPropMappings, State.BEGAN, 'onBegan'), babelHelpers.defineProperty(_stateToPropMappings, State.FAILED, 'onFailed'), babelHelpers.defineProperty(_stateToPropMappings, State.CANCELLED, 'onCancelled'), babelHelpers.defineProperty(_stateToPropMappings, State.ACTIVE, 'onActivated'), babelHelpers.defineProperty(_stateToPropMappings, State.END, 'onEnded'), _stateToPropMappings);

  function canUseNativeParam(param) {
    return param !== undefined && typeof param !== 'function' && (typeof param !== 'object' || !('__isNative' in param));
  }

  function transformIntoHandlerTags(handlerIDs) {
    if (!Array.isArray(handlerIDs)) {
      handlerIDs = [handlerIDs];
    }

    return handlerIDs.map(function (handlerID) {
      return handlerIDToTag[handlerID] || handlerID.current && handlerID.current._handlerTag || -1;
    }).filter(function (handlerTag) {
      return handlerTag > 0;
    });
  }

  function filterConfig(props, validProps) {
    var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var res = babelHelpers.extends({}, defaults);
    Object.keys(validProps).forEach(function (key) {
      var value = props[key];

      if (canUseNativeParam(value)) {
        var _value = props[key];

        if (key === 'simultaneousHandlers' || key === 'waitFor') {
          _value = transformIntoHandlerTags(props[key]);
        } else if (key === 'hitSlop') {
          if (typeof _value !== 'object') {
            _value = {
              top: _value,
              left: _value,
              bottom: _value,
              right: _value
            };
          }
        }

        res[key] = _value;
      }
    });
    return res;
  }

  function hasUnresolvedRefs(props) {
    var extract = function extract(refs) {
      if (!Array.isArray(refs)) {
        return refs && refs.current === null;
      }

      return refs.some(function (r) {
        return r && r.current === null;
      });
    };

    return extract(props['simultaneousHandlers']) || extract(props['waitFor']);
  }

  function createHandler(handlerName) {
    var _class, _temp;

    var propTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var Handler = (_temp = _class = function (_React$Component) {
      babelHelpers.inherits(Handler, _React$Component);

      function Handler(props) {
        babelHelpers.classCallCheck(this, Handler);

        var _this = babelHelpers.possibleConstructorReturn(this, (Handler.__proto__ || Object.getPrototypeOf(Handler)).call(this, props));

        _this._onGestureHandlerEvent = function (event) {
          if (event.nativeEvent.handlerTag === _this._handlerTag) {
            _this.props.onGestureEvent && _this.props.onGestureEvent(event);
          } else {
            _this.props.onGestureHandlerEvent && _this.props.onGestureHandlerEvent(event);
          }
        };

        _this._onGestureHandlerStateChange = function (event) {
          if (event.nativeEvent.handlerTag === _this._handlerTag) {
            _this.props.onHandlerStateChange && _this.props.onHandlerStateChange(event);
            var stateEventName = stateToPropMappings[event.nativeEvent.state];

            if (typeof _this.props[stateEventName] === 'function') {
              _this.props[stateEventName](event);
            }
          } else {
            _this.props.onGestureHandlerStateChange && _this.props.onGestureHandlerStateChange(event);
          }
        };

        _this._refHandler = function (node) {
          _this._viewNode = node;

          var child = _react2.default.Children.only(_this.props.children);

          var ref = child.ref;

          if (ref !== null) {
            if (typeof ref === 'function') {
              ref(node);
            } else {
              ref.current = node;
            }
          }
        };

        _this._handlerTag = handlerTag++;
        _this._config = {};

        if (props.id) {
          if (handlerIDToTag[props.id] !== undefined) {
            throw new Error("Handler with ID \"" + props.id + "\" already registered");
          }

          handlerIDToTag[props.id] = _this._handlerTag;
        }

        return _this;
      }

      babelHelpers.createClass(Handler, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          RNGestureHandlerModule.dropGestureHandler(this._handlerTag);

          if (this._updateEnqueued) {
            clearImmediate(this._updateEnqueued);
          }

          if (this.props.id) {
            delete handlerIDToTag[this.props.id];
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this2 = this;

          this._viewTag = (0, _reactNative.findNodeHandle)(this._viewNode);
          this._config = filterConfig(this.props, this.constructor.propTypes, config);

          if (hasUnresolvedRefs(this.props)) {
            this._updateEnqueued = setImmediate(function () {
              _this2._updateEnqueued = null;

              _this2._update();
            });
          }

          RNGestureHandlerModule.createGestureHandler(handlerName, this._handlerTag, this._config);
          RNGestureHandlerModule.attachGestureHandler(this._handlerTag, this._viewTag);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          var viewTag = (0, _reactNative.findNodeHandle)(this._viewNode);

          if (this._viewTag !== viewTag) {
            this._viewTag = viewTag;
            RNGestureHandlerModule.attachGestureHandler(this._handlerTag, viewTag);
          }

          this._update();
        }
      }, {
        key: "_update",
        value: function _update() {
          var newConfig = filterConfig(this.props, this.constructor.propTypes, config);

          if (!(0, _areEqual2.default)(this._config, newConfig)) {
            this._config = newConfig;
            RNGestureHandlerModule.updateGestureHandler(this._handlerTag, this._config);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var gestureEventHandler = this._onGestureHandlerEvent;
          var _props = this.props,
              onGestureEvent = _props.onGestureEvent,
              onGestureHandlerEvent = _props.onGestureHandlerEvent;

          if (onGestureEvent && typeof onGestureEvent !== 'function') {
            if (onGestureHandlerEvent) {
              throw new Error('Nesting touch handlers with native animated driver is not supported yet');
            }

            gestureEventHandler = this.props.onGestureEvent;
          } else {
            if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {
              throw new Error('Nesting touch handlers with native animated driver is not supported yet');
            }
          }

          var gestureStateEventHandler = this._onGestureHandlerStateChange;
          var _props2 = this.props,
              onHandlerStateChange = _props2.onHandlerStateChange,
              onGestureHandlerStateChange = _props2.onGestureHandlerStateChange;

          if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {
            if (onGestureHandlerStateChange) {
              throw new Error('Nesting touch handlers with native animated driver is not supported yet');
            }

            gestureStateEventHandler = this.props.onHandlerStateChange;
          } else {
            if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {
              throw new Error('Nesting touch handlers with native animated driver is not supported yet');
            }
          }

          var child = _react2.default.Children.only(this.props.children);

          var children = child.props.children;

          if (_Touchable2.default.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {
            children = _react2.default.Children.toArray(children);
            children.push(_Touchable2.default.renderDebugView({
              color: 'mediumspringgreen',
              hitSlop: child.props.hitSlop
            }));
          }

          return _react2.default.cloneElement(child, {
            ref: this._refHandler,
            collapsable: false,
            onGestureHandlerEvent: gestureEventHandler,
            onGestureHandlerStateChange: gestureStateEventHandler
          }, children);
        }
      }]);
      return Handler;
    }(_react2.default.Component), _class.propTypes = babelHelpers.extends({}, GestureHandlerPropTypes, propTypes), _temp);
    return Handler;
  }

  var NativeViewGestureHandler = createHandler('NativeViewGestureHandler', {
    shouldActivateOnStart: _propTypes2.default.bool,
    disallowInterruption: _propTypes2.default.bool
  });
  var TapGestureHandler = createHandler('TapGestureHandler', {
    maxDurationMs: _propTypes2.default.number,
    maxDelayMs: _propTypes2.default.number,
    numberOfTaps: _propTypes2.default.number,
    maxDeltaX: _propTypes2.default.number,
    maxDeltaY: _propTypes2.default.number,
    minPointers: _propTypes2.default.number,
    maxDist: _propTypes2.default.number,
    minPointers: _propTypes2.default.number
  }, {});
  var FlingGestureHandler = createHandler('FlingGestureHandler', {
    numberOfPointers: _propTypes2.default.number,
    direction: _propTypes2.default.number
  }, {});
  var LongPressGestureHandler = createHandler('LongPressGestureHandler', {
    minDurationMs: _propTypes2.default.number,
    maxDist: _propTypes2.default.number
  }, {});
  var PanGestureHandler = createHandler('PanGestureHandler', {
    minDeltaX: _propTypes2.default.number,
    minDeltaY: _propTypes2.default.number,
    maxDeltaX: _propTypes2.default.number,
    maxDeltaY: _propTypes2.default.number,
    minOffsetX: _propTypes2.default.number,
    minOffsetY: _propTypes2.default.number,
    minDist: _propTypes2.default.number,
    minVelocity: _propTypes2.default.number,
    minVelocityX: _propTypes2.default.number,
    minVelocityY: _propTypes2.default.number,
    minPointers: _propTypes2.default.number,
    maxPointers: _propTypes2.default.number,
    avgTouches: _propTypes2.default.bool
  }, {});
  var PinchGestureHandler = createHandler('PinchGestureHandler', {}, {});
  var RotationGestureHandler = createHandler('RotationGestureHandler', {}, {});
  var NATIVE_WRAPPER_BIND_BLACKLIST = new Set(['replaceState', 'isMounted']);
  var NATIVE_WRAPPER_PROPS_FILTER = babelHelpers.extends({}, NativeViewGestureHandler.propTypes, {
    onGestureHandlerEvent: _propTypes2.default.func,
    onGestureHandlerStateChange: _propTypes2.default.func
  });

  function createNativeWrapper(Component) {
    var _class2, _temp3;

    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var ComponentWrapper = (_temp3 = _class2 = function (_React$Component2) {
      babelHelpers.inherits(ComponentWrapper, _React$Component2);

      function ComponentWrapper() {
        var _ref;

        var _temp2, _this3, _ret;

        babelHelpers.classCallCheck(this, ComponentWrapper);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp2 = (_this3 = babelHelpers.possibleConstructorReturn(this, (_ref = ComponentWrapper.__proto__ || Object.getPrototypeOf(ComponentWrapper)).call.apply(_ref, [this].concat(args))), _this3), _this3._refHandler = function (node) {
          for (var methodName in node) {
            var method = node[methodName];

            if (!methodName.startsWith('_') && !methodName.startsWith('component') && !NATIVE_WRAPPER_BIND_BLACKLIST.has(methodName) && typeof method === 'function' && _this3[methodName] === undefined) {
              _this3[methodName] = method;
            }
          }
        }, _temp2), babelHelpers.possibleConstructorReturn(_this3, _ret);
      }

      babelHelpers.createClass(ComponentWrapper, [{
        key: "render",
        value: function render() {
          var _this4 = this;

          var gestureHandlerProps = Object.keys(this.props).reduce(function (props, key) {
            if (key in NATIVE_WRAPPER_PROPS_FILTER) {
              props[key] = _this4.props[key];
            }

            return props;
          }, babelHelpers.extends({}, config));
          return _react2.default.createElement(
            NativeViewGestureHandler,
            gestureHandlerProps,
            _react2.default.createElement(Component, babelHelpers.extends({}, this.props, {
              ref: this._refHandler
            }))
          );
        }
      }]);
      return ComponentWrapper;
    }(_react2.default.Component), _class2.propTypes = babelHelpers.extends({}, Component.propTypes), _temp3);
    return ComponentWrapper;
  }

  var WrappedScrollView = createNativeWrapper(_reactNative.ScrollView, {
    disallowInterruption: true
  });
  var WrappedSlider = createNativeWrapper(_reactNative.Slider, {
    shouldCancelWhenOutside: false,
    shouldActivateOnStart: true,
    disallowInterruption: true
  });
  var WrappedSwitch = createNativeWrapper(_reactNative.Switch, {
    shouldCancelWhenOutside: false,
    shouldActivateOnStart: true,
    disallowInterruption: true
  });
  var WrappedTextInput = createNativeWrapper(_reactNative.TextInput);
  var WrappedWebView = createNativeWrapper(_reactNative.WebView);
  var WrappedToolbarAndroid = createNativeWrapper(_reactNative.ToolbarAndroid);
  var WrappedViewPagerAndroid = createNativeWrapper(_reactNative.ViewPagerAndroid, {
    disallowInterruption: true
  });
  var WrappedDrawerLayoutAndroid = createNativeWrapper(_reactNative.DrawerLayoutAndroid, {
    disallowInterruption: true
  });
  WrappedDrawerLayoutAndroid.positions = _reactNative.DrawerLayoutAndroid.positions;

  State.print = function (state) {
    var keys = Object.keys(State);

    for (var i = 0; i < keys.length; i++) {
      if (state === State[keys[i]]) {
        return keys[i];
      }
    }
  };

  var RawButton = createNativeWrapper((0, _reactNative.requireNativeComponent)('RNGestureHandlerButton', null), {
    shouldCancelWhenOutside: false,
    shouldActivateOnStart: false
  });
  var BaseButton = (_temp4 = _class3 = function (_React$Component3) {
    babelHelpers.inherits(BaseButton, _React$Component3);

    function BaseButton(props) {
      babelHelpers.classCallCheck(this, BaseButton);

      var _this5 = babelHelpers.possibleConstructorReturn(this, (BaseButton.__proto__ || Object.getPrototypeOf(BaseButton)).call(this, props));

      _this5._handleEvent = function (_ref2) {
        var nativeEvent = _ref2.nativeEvent;
        var state = nativeEvent.state,
            oldState = nativeEvent.oldState,
            pointerInside = nativeEvent.pointerInside;
        var active = pointerInside && state === State.ACTIVE;

        if (active !== _this5._lastActive && _this5.props.onActiveStateChange) {
          _this5.props.onActiveStateChange(active);
        }

        if (oldState === State.ACTIVE && state !== State.CANCELLED && _this5._lastActive && _this5.props.onPress) {
          _this5.props.onPress(active);
        }

        _this5._lastActive = active;
      };

      _this5._onHandlerStateChange = function (e) {
        _this5.props.onHandlerStateChange && _this5.props.onHandlerStateChange(e);

        _this5._handleEvent(e);
      };

      _this5._onGestureEvent = function (e) {
        _this5.props.onGestureEvent && _this5.props.onGestureEvent(e);

        _this5._handleEvent(e);
      };

      _this5._lastActive = false;
      return _this5;
    }

    babelHelpers.createClass(BaseButton, [{
      key: "render",
      value: function render() {
        var _props3 = this.props,
            style = _props3.style,
            rest = babelHelpers.objectWithoutProperties(_props3, ["style"]);
        return _react2.default.createElement(RawButton, babelHelpers.extends({
          style: [{
            overflow: 'hidden'
          }, style]
        }, rest, {
          onGestureEvent: this._onGestureEvent,
          onHandlerStateChange: this._onHandlerStateChange
        }));
      }
    }]);
    return BaseButton;
  }(_react2.default.Component), _class3.propTypes = babelHelpers.extends({}, RawButton.propTypes, {
    onPress: _propTypes2.default.func,
    onActiveStateChange: _propTypes2.default.func
  }), _temp4);

  var AnimatedBaseButton = _reactNative.Animated.createAnimatedComponent(BaseButton);

  var btnStyles = _reactNative.StyleSheet.create({
    underlay: {
      position: 'absolute',
      left: 0,
      right: 0,
      bottom: 0,
      top: 0
    }
  });

  var RectButton = (_temp5 = _class4 = function (_React$Component4) {
    babelHelpers.inherits(RectButton, _React$Component4);

    function RectButton(props) {
      babelHelpers.classCallCheck(this, RectButton);

      var _this6 = babelHelpers.possibleConstructorReturn(this, (RectButton.__proto__ || Object.getPrototypeOf(RectButton)).call(this, props));

      _this6._onActiveStateChange = function (active) {
        _this6.props.onActiveStateChange && _this6.props.onActiveStateChange(active);
      };

      _this6._opacity = new _reactNative.Animated.Value(0);
      return _this6;
    }

    babelHelpers.createClass(RectButton, [{
      key: "render",
      value: function render() {
        var _props4 = this.props,
            children = _props4.children,
            rest = babelHelpers.objectWithoutProperties(_props4, ["children"]);
        return _react2.default.createElement(
          BaseButton,
          babelHelpers.extends({}, rest, {
            onActiveStateChange: this._onActiveStateChange
          }),
          _react2.default.createElement(_reactNative.Animated.View, {
            style: [btnStyles.underlay, {
              opacity: this._opacity
            }, {
              backgroundColor: this.props.underlayColor
            }]
          }),
          children
        );
      }
    }]);
    return RectButton;
  }(_react2.default.Component), _class4.propTypes = BaseButton.propTypes, _class4.defaultProps = {
    activeOpacity: 0.105,
    underlayColor: 'black'
  }, _temp5);
  var BorderlessButton = (_temp6 = _class5 = function (_React$Component5) {
    babelHelpers.inherits(BorderlessButton, _React$Component5);

    function BorderlessButton(props) {
      babelHelpers.classCallCheck(this, BorderlessButton);

      var _this7 = babelHelpers.possibleConstructorReturn(this, (BorderlessButton.__proto__ || Object.getPrototypeOf(BorderlessButton)).call(this, props));

      _this7._onActiveStateChange = function (active) {
        _this7.props.onActiveStateChange && _this7.props.onActiveStateChange(active);
      };

      _this7._opacity = new _reactNative.Animated.Value(1);
      return _this7;
    }

    babelHelpers.createClass(BorderlessButton, [{
      key: "render",
      value: function render() {
        var _props5 = this.props,
            children = _props5.children,
            style = _props5.style,
            rest = babelHelpers.objectWithoutProperties(_props5, ["children", "style"]);
        return _react2.default.createElement(
          AnimatedBaseButton,
          babelHelpers.extends({}, rest, {
            onActiveStateChange: this._onActiveStateChange,
            style: [style, false]
          }),
          children
        );
      }
    }]);
    return BorderlessButton;
  }(_react2.default.Component), _class5.propTypes = babelHelpers.extends({}, BaseButton.propTypes, {
    borderless: _propTypes2.default.bool
  }), _class5.defaultProps = {
    activeOpacity: 0.3,
    borderless: true
  }, _temp6);

  var FlatListWithGHScroll = function FlatListWithGHScroll(props) {
    return _react2.default.createElement(_reactNative.FlatList, babelHelpers.extends({}, props, {
      renderScrollComponent: function renderScrollComponent(props) {
        return _react2.default.createElement(WrappedScrollView, props);
      }
    }));
  };

  exports.ScrollView = WrappedScrollView;
  exports.Slider = WrappedSlider;
  exports.Switch = WrappedSwitch;
  exports.TextInput = WrappedTextInput;
  exports.ToolbarAndroid = WrappedToolbarAndroid;
  exports.ViewPagerAndroid = WrappedViewPagerAndroid;
  exports.DrawerLayoutAndroid = WrappedDrawerLayoutAndroid;
  exports.WebView = WrappedWebView;
  exports.NativeViewGestureHandler = NativeViewGestureHandler;
  exports.TapGestureHandler = TapGestureHandler;
  exports.FlingGestureHandler = FlingGestureHandler;
  exports.LongPressGestureHandler = LongPressGestureHandler;
  exports.PanGestureHandler = PanGestureHandler;
  exports.PinchGestureHandler = PinchGestureHandler;
  exports.RotationGestureHandler = RotationGestureHandler;
  exports.State = State;
  exports.RawButton = RawButton;
  exports.BaseButton = BaseButton;
  exports.RectButton = RectButton;
  exports.BorderlessButton = BorderlessButton;
  exports.FlatList = FlatListWithGHScroll;
  exports.gestureHandlerRootHOC = _gestureHandlerRootHOC2.default;
  exports.Swipeable = _Swipeable2.default;
  exports.DrawerLayout = _DrawerLayout2.default;
  exports.Directions = Directions;
});